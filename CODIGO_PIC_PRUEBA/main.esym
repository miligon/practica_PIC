D G "__PCH__" 2 46 ""5.025""
D G "__DEVICE__" 2 46 "2550"
D G "__DATE__" 2 46 ""02-abr.-22""
D G "__TIME__" 2 46 ""18:03:35"" "Standard Header file for the PIC18F2550 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 45 "int8" `54 
f B "set_tris_a" 2 45 "void(int8 value)" `53 
v L "value" 2 46 "int8" `56 
f B "set_tris_b" 2 46 "void(int8 value)" `55 
v L "value" 2 47 "int8" `58 
f B "set_tris_c" 2 47 "void(int8 value)" `57 
v L "value" 2 48 "int8" `60 
f B "set_tris_e" 2 48 "void(int8 value)" `59 
f B "get_tris_a" 2 49 "int8()" `61 
f B "get_tris_b" 2 50 "int8()" `62 
f B "get_tris_c" 2 51 "int8()" `63 
f B "get_tris_e" 2 52 "int8()" `64 
v L "value" 2 53 "int8" `66 
f B "output_a" 2 53 "void(int8 value)" `65 
v L "value" 2 54 "int8" `68 
f B "output_b" 2 54 "void(int8 value)" `67 
v L "value" 2 55 "int8" `70 
f B "output_c" 2 55 "void(int8 value)" `69 
v L "value" 2 56 "int8" `72 
f B "output_e" 2 56 "void(int8 value)" `71 
f B "input_a" 2 57 "int8()" `73 
f B "input_b" 2 58 "int8()" `74 
f B "input_c" 2 59 "int8()" `75 
f B "input_e" 2 60 "int8()" `76 
f B "input_change_a" 2 61 "int8()" `77 
f B "input_change_b" 2 62 "int8()" `78 
f B "input_change_c" 2 63 "int8()" `79 
f B "input_change_e" 2 64 "int8()" `80 
v L "pin" 2 65 "int16" `82 
f B "input" 2 65 "int8(int16 pin)" `81 
v L "pin" 2 66 "int16" `84 
f B "input_state" 2 66 "int8(int16 pin)" `83 
v L "pin" 2 67 "int16" `86 
f B "output_low" 2 67 "void(int16 pin)" `85 
v L "pin" 2 68 "int16" `88 
f B "output_high" 2 68 "void(int16 pin)" `87 
v L "pin" 2 69 "int16" `90 
f B "output_toggle" 2 69 "void(int16 pin)" `89 
v L "pin" 2 70 "int16" `92 
v L "level" 2 70 "int8" `93 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `91 
v L "pin" 2 71 "int16" `95 
f B "output_float" 2 71 "void(int16 pin)" `94 
v L "pin" 2 72 "int16" `97 
f B "output_drive" 2 72 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "31744"
d G "PIN_A1" 2 77 "31745"
d G "PIN_A2" 2 78 "31746"
d G "PIN_A3" 2 79 "31747"
d G "PIN_A4" 2 80 "31748"
d G "PIN_A5" 2 81 "31749"
d G "PIN_A6" 2 82 "31750"
d G "PIN_B0" 2 84 "31752"
d G "PIN_B1" 2 85 "31753"
d G "PIN_B2" 2 86 "31754"
d G "PIN_B3" 2 87 "31755"
d G "PIN_B4" 2 88 "31756"
d G "PIN_B5" 2 89 "31757"
d G "PIN_B6" 2 90 "31758"
d G "PIN_B7" 2 91 "31759"
d G "PIN_C0" 2 93 "31760"
d G "PIN_C1" 2 94 "31761"
d G "PIN_C2" 2 95 "31762"
d G "PIN_C4" 2 96 "31764"
d G "PIN_C5" 2 97 "31765"
d G "PIN_C6" 2 98 "31766"
d G "PIN_C7" 2 99 "31767"
d G "PIN_E3" 2 101 "31779"
d G "FALSE" 2 104 "0"
d G "TRUE" 2 105 "1"
d G "BYTE" 2 107 "int8"
d G "BOOLEAN" 2 108 "int1"
d G "getc" 2 110 "getch"
d G "fgetc" 2 111 "getch"
d G "getchar" 2 112 "getch"
d G "putc" 2 113 "putchar"
d G "fputc" 2 114 "putchar"
d G "fgets" 2 115 "gets"
d G "fputs" 2 116 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 121 "int8()" `98 
f B "reset_cpu" 2 122 "void()" `99 
f B "sleep" 2 123 "void()" `100 
v L "type" 2 124 "int8" `102 
f G "sleep" 2 124 "void(int8 type)" `101  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 126 "7"
d G "MCLR_FROM_SLEEP" 2 127 "11"
d G "MCLR_FROM_RUN" 2 128 "15"
d G "NORMAL_POWER_UP" 2 129 "12"
d G "BROWNOUT_RESTART" 2 130 "14"
d G "WDT_FROM_SLEEP" 2 131 "3"
d G "RESET_INSTRUCTION" 2 132 "0"
d G "SLEEP_FULL" 2 135 "0" "Default"
d G "SLEEP_IDLE" 2 136 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 143 "int8" `104 
f B "setup_timer_0" 2 143 "void(int8 mode)" `103 
v L "value" 2 144 "int16" `106 
f B "set_timer0" 2 144 "void(int16 value)" `105 
f B "get_timer0" 2 145 "int16()" `107 
v L "mode" 2 146 "int8" `109 
v L "prescaler" 2 146 "int8" `110 
f B "setup_counters" 2 146 "void(int8 mode,int8 prescaler)" `108 
v L "value" 2 147 "int16" `112 
f B "set_rtcc" 2 147 "void(int16 value)" `111 
f B "get_rtcc" 2 148 "int16()" `113  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 150 "0"
d G "T0_EXT_L_TO_H" 2 151 "32"
d G "T0_EXT_H_TO_L" 2 152 "48"
d G "T0_DIV_1" 2 154 "8"
d G "T0_DIV_2" 2 155 "0"
d G "T0_DIV_4" 2 156 "1"
d G "T0_DIV_8" 2 157 "2"
d G "T0_DIV_16" 2 158 "3"
d G "T0_DIV_32" 2 159 "4"
d G "T0_DIV_64" 2 160 "5"
d G "T0_DIV_128" 2 161 "6"
d G "T0_DIV_256" 2 162 "7"
d G "T0_OFF" 2 164 "0x80"
d G "T0_8_BIT" 2 166 "0x40"
d G "RTCC_INTERNAL" 2 168 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 169 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 170 "48"
d G "RTCC_DIV_1" 2 171 "8"
d G "RTCC_DIV_2" 2 172 "0"
d G "RTCC_DIV_4" 2 173 "1"
d G "RTCC_DIV_8" 2 174 "2"
d G "RTCC_DIV_16" 2 175 "3"
d G "RTCC_DIV_32" 2 176 "4"
d G "RTCC_DIV_64" 2 177 "5"
d G "RTCC_DIV_128" 2 178 "6"
d G "RTCC_DIV_256" 2 179 "7"
d G "RTCC_OFF" 2 180 "0x80"
d G "RTCC_8_BIT" 2 181 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 192 "int16" `115 
f B "setup_wdt" 2 192 "void(int16 mode)" `114 
f B "restart_wdt" 2 193 "void()" `116  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 195 "0x100"
d G "WDT_OFF" 2 196 "0"
d G "WDT_4MS" 2 198 "0x300"
d G "WDT_8MS" 2 199 "0x500"
d G "WDT_16MS" 2 200 "0x700"
d G "WDT_32MS" 2 201 "0x900"
d G "WDT_64MS" 2 202 "0xB00"
d G "WDT_128MS" 2 203 "0xD00"
d G "WDT_256MS" 2 204 "0xF00"
d G "WDT_512MS" 2 205 "0x1100"
d G "WDT_1S" 2 206 "0x1300"
d G "WDT_2S" 2 207 "0x1500"
d G "WDT_4S" 2 208 "0x1700"
d G "WDT_8S" 2 209 "0x1900"
d G "WDT_16" 2 210 "0x1B00"
d G "WDT_32S" 2 211 "0x1D00"
d G "WDT_64S" 2 212 "0x1F00"
d G "WDT_128S" 2 213 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 218 "int16" `118 
f B "setup_timer_1" 2 218 "void(int16 mode)" `117 
f B "get_timer1" 2 219 "int16()" `119 
v L "value" 2 220 "int16" `121 
f B "set_timer1" 2 220 "void(int16 value)" `120  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 223 "0"
d G "T1_INTERNAL" 2 224 "0x85"
d G "T1_EXTERNAL" 2 225 "0x87"
d G "T1_EXTERNAL_SYNC" 2 226 "0x83"
d G "T1_CLK_OUT" 2 228 "8"
d G "T1_DIV_BY_1" 2 230 "0"
d G "T1_DIV_BY_2" 2 231 "0x10"
d G "T1_DIV_BY_4" 2 232 "0x20"
d G "T1_DIV_BY_8" 2 233 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 238 "int8" `123 
v L "period" 2 238 "int8" `124 
v L "postscale" 2 238 "int8" `125 
f B "setup_timer_2" 2 238 "void(int8 mode,int8 period,int8 postscale)" `122 
f B "get_timer2" 2 239 "int8()" `126 
v L "value" 2 240 "int8" `128 
f B "set_timer2" 2 240 "void(int8 value)" `127  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 242 "0"
d G "T2_DIV_BY_1" 2 243 "4"
d G "T2_DIV_BY_4" 2 244 "5"
d G "T2_DIV_BY_16" 2 245 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 250 "int16" `130 
f B "setup_timer_3" 2 250 "void(int16 mode)" `129 
f B "get_timer3" 2 251 "int16()" `131 
v L "value" 2 252 "int16" `133 
f B "set_timer3" 2 252 "void(int16 value)" `132  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 255 "0"
d G "T3_INTERNAL" 2 256 "0x85"
d G "T3_EXTERNAL" 2 257 "0x87"
d G "T3_EXTERNAL_SYNC" 2 258 "0x83"
d G "T3_DIV_BY_1" 2 260 "0"
d G "T3_DIV_BY_2" 2 261 "0x10"
d G "T3_DIV_BY_4" 2 262 "0x20"
d G "T3_DIV_BY_8" 2 263 "0x30"
c L "set_timer3" 2 3 4 "FUNCTION"
v L "mode" 2 269 "int32" `135 
f B "setup_ccp1" 2 269 "void(int32 mode)" `134 
v L "mode" 2 270 "int32" `137 
v L "pwm" 2 270 "int8" `138 
f G "setup_ccp1" 2 270 "void(int32 mode,int8 pwm)" `136 
v L "value" 2 271 "int16" `140 
f B "set_pwm1_duty" 2 271 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 273 "0"
d G "CCP_CAPTURE_FE" 2 274 "0x04"
d G "CCP_CAPTURE_RE" 2 275 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 276 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 277 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 278 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 279 "0x09"
d G "CCP_COMPARE_INT" 2 280 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 281 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 282 "0x0B"
d G "CCP_PWM" 2 283 "0x0C"
d G "CCP_PWM_PLUS_1" 2 284 "0x1c"
d G "CCP_PWM_PLUS_2" 2 285 "0x2c"
d G "CCP_PWM_PLUS_3" 2 286 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 293 "0x48"
d G "T3_CCP2" 2 294 "0x8"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 298 "int32" `145 
f B "setup_ccp2" 2 298 "void(int32 mode)" `144 
v L "mode" 2 299 "int32" `147 
v L "pwm" 2 299 "int8" `148 
f G "setup_ccp2" 2 299 "void(int32 mode,int8 pwm)" `146 
v L "value" 2 300 "int16" `150 
f B "set_pwm2_duty" 2 300 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 307 "int32" `155 
f B "setup_spi" 2 307 "void(int32 mode)" `154 
v L "value" 2 308 "int8" `157 
f B "spi_write" 2 308 "void(int8 value)" `156 
f B "spi_read" 2 309 "int8()" `158 
v L "value" 2 310 "int8" `160 
f G "spi_read" 2 310 "int8(int8 value)" `159 
f B "spi_data_in" 2 311 "int8()" `161 
v L "mode" 2 312 "int32" `163 
f B "setup_spi2" 2 312 "void(int32 mode)" `162 
v L "value" 2 313 "int8" `165 
f B "spi_write2" 2 313 "void(int8 value)" `164 
f B "spi_read2" 2 314 "int8()" `166 
v L "value" 2 315 "int8" `168 
f G "spi_read2" 2 315 "int8(int8 value)" `167 
f B "spi_data_in2" 2 316 "int8()" `169  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 318 "0x00"
d G "SPI_MASTER" 2 319 "0x20"
d G "SPI_SLAVE" 2 320 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 321 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 322 "0x00"
d G "SPI_CLK_DIV_4" 2 323 "0x00"
d G "SPI_CLK_DIV_16" 2 324 "0x01"
d G "SPI_CLK_DIV_64" 2 325 "0x02"
d G "SPI_CLK_T2" 2 326 "0x03"
d G "SPI_SS_DISABLED" 2 327 "0x01"
d G "SPI_XMIT_L_TO_H" 2 329 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 330 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 332 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 333 "0x8000"
d G "SPI_L_TO_H" 2 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 337 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 341 "int32" `171 
f B "setup_uart" 2 341 "void(int32 baud)" `170 
v L "baud" 2 342 "int32" `173 
v L "stream" 2 342 "int8" `174 
f G "setup_uart" 2 342 "void(int32 baud,int8 stream)" `172 
v L "baud" 2 343 "int32" `176 
v L "stream" 2 343 "int8" `177 
v L "clock" 2 343 "int32" `178 
f G "setup_uart" 2 343 "void(int32 baud,int8 stream,int32 clock)" `175 
v L "baud" 2 344 "int32" `180 
f B "set_uart_speed" 2 344 "void(int32 baud)" `179 
v L "baud" 2 345 "int32" `182 
v L "stream" 2 345 "int8" `183 
f G "set_uart_speed" 2 345 "void(int32 baud,int8 stream)" `181 
v L "baud" 2 346 "int32" `185 
v L "stream" 2 346 "int8" `186 
v L "clock" 2 346 "int32" `187 
f G "set_uart_speed" 2 346 "void(int32 baud,int8 stream,int32 clock)" `184  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 350 "2"
d G "UART_DATA" 2 351 "4"
d G "UART_AUTODETECT" 2 352 "8"
d G "UART_AUTODETECT_NOWAIT" 2 353 "9"
d G "UART_WAKEUP_ON_RDA" 2 354 "10"
d G "UART_SEND_BREAK" 2 355 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 359 "int32" `189 
f B "setup_comparator" 2 359 "void(int32 mode)" `188  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 361 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 362 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 363 "0xbcf05"
d G "NC_NC_NC_NC" 2 364 "0x0ff07"
d G "A0_A3_A1_A2" 2 365 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 366 "0x9ef01"
d G "A0_VR_A1_VR" 2 367 "0x3ff06"
d G "A3_VR_A2_VR" 2 368 "0xcff0e"
d G "CP1_INVERT" 2 369 "0x0000010"
d G "CP2_INVERT" 2 370 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 377 "int8" `193 
f B "setup_vref" 2 377 "void(int8 mode)" `192  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 379 "0xa0"
d G "VREF_HIGH" 2 380 "0x80"
d G "VREF_F5" 2 382 "0x40"
d G "VREF_COMP" 2 383 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
v L "mode" 2 387 "int8" `195 
f B "setup_low_volt_detect" 2 387 "void(int8 mode)" `194  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 389 "0x1F"
d G "LVD_45" 2 390 "0x1E"
d G "LVD_42" 2 391 "0x1D"
d G "LVD_40" 2 392 "0x1C"
d G "LVD_38" 2 393 "0x1B"
d G "LVD_36" 2 394 "0x1A"
d G "LVD_35" 2 395 "0x19"
d G "LVD_33" 2 396 "0x18"
d G "LVD_30" 2 397 "0x17"
d G "LVD_28" 2 398 "0x16"
d G "LVD_27" 2 399 "0x15"
d G "LVD_25" 2 400 "0x14"
d G "LVD_24" 2 401 "0x13"
d G "LVD_23" 2 402 "0x12"
d G "LVD_22" 2 403 "0x11"
d G "LVD_21" 2 404 "0x10"
d G "LVD_TRIGGER_BELOW" 2 406 "0"
d G "LVD_TRIGGER_ABOVE" 2 407 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
v L "mode" 2 412 "int16" `197 
f B "setup_oscillator" 2 412 "int8(int16 mode)" `196 
v L "mode" 2 413 "int16" `199 
v L "tune" 2 413 "sint8" `200 
f G "setup_oscillator" 2 413 "int8(int16 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 416 "0"
d G "OSC_125KHZ" 2 417 "0x10"
d G "OSC_250KHZ" 2 418 "0x20"
d G "OSC_500KHZ" 2 419 "0x30"
d G "OSC_1MHZ" 2 420 "0x40"
d G "OSC_2MHZ" 2 421 "0x50"
d G "OSC_4MHZ" 2 422 "0x60"
d G "OSC_8MHZ" 2 423 "0x70"
d G "OSC_TIMER1" 2 425 "1"
d G "OSC_INTRC" 2 426 "2"
d G "OSC_NORMAL" 2 427 "0"
d G "OSC_IDLE_MODE" 2 429 "0x80"
d G "OSC_31250" 2 430 "0x8000"
d G "OSC_STATE_STABLE" 2 434 "4"
d G "OSC_STATE_EXT_RUNNING" 2 435 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 442 "int16" `202 
f B "setup_adc" 2 442 "void(int16 mode)" `201 
f B "read_adc" 2 443 "int8()" `203 
v L "mode" 2 444 "int8" `205 
f G "read_adc" 2 444 "int8(int8 mode)" `204 
f G "read_adc" 2 445 "int16()" `206 
v L "mode" 2 446 "int8" `208 
f G "read_adc" 2 446 "int16(int8 mode)" `207 
f B "adc_done" 2 447 "int8()" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 449 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 450 "0x100"
d G "ADC_CLOCK_DIV_4" 2 451 "0x04"
d G "ADC_CLOCK_DIV_8" 2 452 "0x01"
d G "ADC_CLOCK_DIV_16" 2 453 "0x05"
d G "ADC_CLOCK_DIV_32" 2 454 "0x02"
d G "ADC_CLOCK_DIV_64" 2 455 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 456 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 458 "0x00"
d G "ADC_TAD_MUL_2" 2 459 "0x08"
d G "ADC_TAD_MUL_4" 2 460 "0x10"
d G "ADC_TAD_MUL_6" 2 461 "0x18"
d G "ADC_TAD_MUL_8" 2 462 "0x20"
d G "ADC_TAD_MUL_12" 2 463 "0x28"
d G "ADC_TAD_MUL_16" 2 464 "0x30"
d G "ADC_TAD_MUL_20" 2 465 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 468 "int8" `211 
f B "setup_adc_ports" 2 468 "void(int8 pins)" `210 
v L "pins" 2 469 "int8" `213 
v L "reference" 2 469 "int8" `214 
f G "setup_adc_ports" 2 469 "void(int8 pins,int8 reference)" `212 
v L "channel" 2 470 "int8" `216 
f B "set_adc_channel" 2 470 "void(int8 channel)" `215  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 473 "0x0F" "None"
d G "ALL_ANALOG" 2 474 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 475 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 476 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 477 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 478 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 479 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 480 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 481 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 482 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 483 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 484 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 485 "0x0D" "A0 A1"
d G "AN0" 2 486 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 487 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 488 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 489 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 490 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 491 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 492 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 493 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 494 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 495 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 496 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 497 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 498 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 501 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 502 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 503 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 504 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 507 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 508 "1"
d G "ADC_READ_ONLY" 2 509 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 515 "sint8" `218 
f B "abs" 2 515 "sint8(sint8 x)" `217 
v L "x" 2 516 "sint16" `220 
f G "abs" 2 516 "sint16(sint16 x)" `219 
v L "x" 2 517 "sint32" `222 
f G "abs" 2 517 "sint32(sint32 x)" `221 
v L "x" 2 518 "float" `224 
f G "abs" 2 518 "float(float x)" `223 
v L "??65535" 2 519 "int8" `226 
v L "??65535" 2 519 "int8" `227 
f B "_mul" 2 519 "int16(int8 ,int8 )" `225 
v L "??65535" 2 520 "sint8" `226 
v L "??65535" 2 520 "sint8" `230 
f G "_mul" 2 520 "sint16(sint8 ,sint8 )" `228 
v L "??65535" 2 521 "int16" `226 
v L "??65535" 2 521 "int16" `233 
f G "_mul" 2 521 "int32(int16 ,int16 )" `231 
v L "??65535" 2 522 "sint16" `226 
v L "??65535" 2 522 "sint16" `236 
f G "_mul" 2 522 "sint32(sint16 ,sint16 )" `234  "Memory Manipulation Prototypes:"
v L "bank" 2 525 "int8" `238 
v L "offset" 2 525 "int8" `239 
f B "read_bank" 2 525 "int8(int8 bank,int8 offset)" `237 
v L "bank" 2 526 "int8" `241 
v L "offset" 2 526 "int8" `242 
v L "value" 2 526 "int8" `243 
f B "write_bank" 2 526 "void(int8 bank,int8 offset,int8 value)" `240 
v L "dest" 2 527 "*int8" `245 
v L "src" 2 527 "*int8" `246 
f B "strcpy" 2 527 "void(*int8 dest,*int8 src)" `244 
v L "dest" 2 528 "*int8" `248 
v L "src" 2 528 "*int8" `249 
f B "strcopy" 2 528 "void(*int8 dest,*int8 src)" `247 
v L "destination" 2 529 "*int8" `251 
v L "value" 2 529 "int8" `252 
v L "num" 2 529 "int16" `253 
f B "memset" 2 529 "void(*int8 destination,int8 value,int16 num)" `250 
v L "destination" 2 530 "*int8" `255 
v L "source" 2 530 "*int8" `256 
v L "num" 2 530 "int16" `257 
f B "memcpy" 2 530 "void(*int8 destination,*int8 source,int16 num)" `254  "String Prototypes:"
v L "cvalue" 2 533 "int8" `259 
f B "toupper" 2 533 "int8(int8 cvalue)" `258 
v L "cvalue" 2 534 "int8" `261 
f B "tolower" 2 534 "int8(int8 cvalue)" `260 
v L "string" 2 535 "*int8" `263 
v L "cstring" 2 535 "*int8" `264 
f B "sprintf" 2 535 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `262  "Data Manipulators Prototypes:"
v L "address" 2 538 "*int8" `267 
v L "bytes" 2 538 "int8" `268 
v L "value" 2 538 "int8" `269 
f B "shift_left" 2 538 "int8(*int8 address,int8 bytes,int8 value)" `266 
v L "address" 2 539 "*int8" `271 
v L "bytes" 2 539 "int8" `272 
v L "value" 2 539 "int8" `273 
f B "shift_right" 2 539 "int8(*int8 address,int8 bytes,int8 value)" `270 
v L "address" 2 540 "*int8" `275 
v L "bytes" 2 540 "int8" `276 
f B "rotate_left" 2 540 "void(*int8 address,int8 bytes)" `274 
v L "address" 2 541 "*int8" `278 
v L "bytes" 2 541 "int8" `279 
f B "rotate_right" 2 541 "void(*int8 address,int8 bytes)" `277 
v L "value" 2 542 "int8" `281 
f B "swap" 2 542 "void(int8 value)" `280 
v L "var" 2 543 "int16" `283 
v L "offset" 2 543 "int8" `284 
f B "make8" 2 543 "int8(int16 var,int8 offset)" `282 
v L "var" 2 544 "int32" `283 
v L "offset" 2 544 "int8" `287 
f G "make8" 2 544 "int8(int32 var,int8 offset)" `285 
v L "varhigh" 2 545 "int8" `289 
v L "varlow" 2 545 "int8" `290 
f B "make16" 2 545 "int16(int8 varhigh,int8 varlow)" `288 
v L "var1" 2 546 "int16" `292 
f B "make32" 2 546 "int32(int16 var1)" `291 
v L "var1" 2 547 "int16" `294 
v L "var2" 2 547 "int16" `295 
f G "make32" 2 547 "int32(int16 var1,int16 var2)" `293 
v L "var1" 2 548 "int16" `294 
v L "var2" 2 548 "int8" `298 
f G "make32" 2 548 "int32(int16 var1,int8 var2)" `296 
v L "var1" 2 549 "int16" `300 
v L "var2" 2 549 "int8" `301 
v L "var3" 2 549 "int8" `302 
f G "make32" 2 549 "int32(int16 var1,int8 var2,int8 var3)" `299 
v L "var1" 2 550 "int8" `304 
f G "make32" 2 550 "int32(int8 var1)" `303 
v L "var1" 2 551 "int8" `294 
v L "var2" 2 551 "int8" `307 
f G "make32" 2 551 "int32(int8 var1,int8 var2)" `305 
v L "var1" 2 552 "int8" `300 
v L "var2" 2 552 "int8" `301 
v L "var3" 2 552 "int8" `311 
f G "make32" 2 552 "int32(int8 var1,int8 var2,int8 var3)" `308 
v L "var1" 2 553 "int8" `313 
v L "var2" 2 553 "int8" `314 
v L "var3" 2 553 "int8" `315 
v L "var4" 2 553 "int8" `316 
f G "make32" 2 553 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `312 
v L "var1" 2 554 "int8" `294 
v L "var2" 2 554 "int16" `319 
f G "make32" 2 554 "int32(int8 var1,int16 var2)" `317 
v L "var1" 2 555 "int8" `300 
v L "var2" 2 555 "int16" `301 
v L "var3" 2 555 "int8" `323 
f G "make32" 2 555 "int32(int8 var1,int16 var2,int8 var3)" `320 
v L "var1" 2 556 "int8" `300 
v L "var2" 2 556 "int8" `301 
v L "var3" 2 556 "int16" `327 
f G "make32" 2 556 "int32(int8 var1,int8 var2,int16 var3)" `324 
v L "var" 2 557 "int8" `329 
v L "bit" 2 557 "int8" `330 
f B "bit_set" 2 557 "void(int8 var,int8 bit)" `328 
v L "var" 2 558 "int16" `329 
v L "bit" 2 558 "int8" `333 
f G "bit_set" 2 558 "void(int16 var,int8 bit)" `331 
v L "var" 2 559 "int32" `329 
v L "bit" 2 559 "int8" `336 
f G "bit_set" 2 559 "void(int32 var,int8 bit)" `334 
v L "var" 2 560 "int8" `338 
v L "bit" 2 560 "int8" `339 
f B "bit_clear" 2 560 "void(int8 var,int8 bit)" `337 
v L "var" 2 561 "int16" `338 
v L "bit" 2 561 "int8" `342 
f G "bit_clear" 2 561 "void(int16 var,int8 bit)" `340 
v L "var" 2 562 "int32" `338 
v L "bit" 2 562 "int8" `345 
f G "bit_clear" 2 562 "void(int32 var,int8 bit)" `343 
v L "var" 2 563 "int8" `347 
v L "bit" 2 563 "int8" `348 
f B "bit_test" 2 563 "int8(int8 var,int8 bit)" `346 
v L "var" 2 564 "int16" `347 
v L "bit" 2 564 "int8" `351 
f G "bit_test" 2 564 "int8(int16 var,int8 bit)" `349 
v L "var" 2 565 "int32" `347 
v L "bit" 2 565 "int8" `354 
f G "bit_test" 2 565 "int8(int32 var,int8 bit)" `352  "#use delay() Prototypes:"
v L "count" 2 568 "int8" `356 
f B "delay_cycles" 2 568 "void(int8 count)" `355 
v L "time" 2 569 "int16" `358 
f B "delay_ms" 2 569 "void(int16 time)" `357 
v L "time" 2 570 "int16" `360 
f B "delay_us" 2 570 "void(int16 time)" `359  "#use rs232() Prototypes:"
v L "cdata" 2 573 "int8" `362 
f B "putchar" 2 573 "void(int8 cdata)" `361 
v L "cdata" 2 574 "int8" `364 
v L "stream" 2 574 "int8" `365 
f G "putchar" 2 574 "void(int8 cdata,int8 stream)" `363 
v L "string" 2 575 "*int8" `367 
f B "puts" 2 575 "void(*int8 string)" `366 
v L "string" 2 576 "*int8" `369 
v L "stream" 2 576 "int8" `370 
f G "puts" 2 576 "void(*int8 string,int8 stream)" `368 
f B "getch" 2 577 "int8()" `371 
v L "stream" 2 578 "int8" `373 
f G "getch" 2 578 "int8(int8 stream)" `372 
v L "string" 2 579 "*int8" `375 
f B "gets" 2 579 "void(*int8 string)" `374 
v L "string" 2 580 "*int8" `377 
v L "stream" 2 580 "int8" `378 
f G "gets" 2 580 "void(*int8 string,int8 stream)" `376 
f B "kbhit" 2 581 "int8()" `379 
v L "stream" 2 582 "int8" `381 
f G "kbhit" 2 582 "int8(int8 stream)" `380 
v L "string" 2 583 "*int8" `383 
f B "printf" 2 583 "void(*int8 string,*int8 _VA_LIST)" `382 
v L "stream" 2 584 "int8" `386 
v L "string" 2 584 "*int8" `387 
f B "fprintf" 2 584 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `385 
f B "putc_send" 2 585 "void()" `389 
v L "stream" 2 586 "int8" `391 
f B "fputc_send" 2 586 "void(int8 stream)" `390 
f B "rcv_buffer_full" 2 587 "int8()" `392 
v L "stream" 2 588 "int8" `394 
f G "rcv_buffer_full" 2 588 "int8(int8 stream)" `393 
f B "rcv_buffer_bytes" 2 589 "int16()" `395 
v L "stream" 2 590 "int8" `397 
f G "rcv_buffer_bytes" 2 590 "int16(int8 stream)" `396 
f B "tx_buffer_full" 2 591 "int8()" `398 
v L "stream" 2 592 "int8" `400 
f G "tx_buffer_full" 2 592 "int8(int8 stream)" `399 
f B "tx_buffer_bytes" 2 593 "int16()" `401 
v L "stream" 2 594 "int8" `403 
f G "tx_buffer_bytes" 2 594 "int16(int8 stream)" `402  "#use i2c() Prototypes:"
f B "i2c_read" 2 597 "int8()" `404 
v L "stream" 2 598 "int8" `406 
f G "i2c_read" 2 598 "int8(int8 stream)" `405 
v L "stream" 2 599 "int8" `408 
v L "ack" 2 599 "int8" `409 
f G "i2c_read" 2 599 "int8(int8 stream,int8 ack)" `407 
v L "data" 2 600 "int8" `411 
f B "i2c_write" 2 600 "int8(int8 data)" `410 
v L "stream" 2 601 "int8" `413 
v L "data" 2 601 "int8" `414 
f G "i2c_write" 2 601 "int8(int8 stream,int8 data)" `412 
f B "i2c_start" 2 602 "void()" `415 
v L "stream" 2 603 "int8" `417 
f G "i2c_start" 2 603 "void(int8 stream)" `416 
v L "stream" 2 604 "int8" `419 
v L "restart" 2 604 "int8" `420 
f G "i2c_start" 2 604 "void(int8 stream,int8 restart)" `418 
f B "i2c_stop" 2 605 "void()" `421 
v L "stream" 2 606 "int8" `423 
f G "i2c_stop" 2 606 "void(int8 stream)" `422 
f B "i2c_isr_state" 2 607 "int8()" `424 
v L "addr" 2 608 "int8" `426 
f B "i2c_slaveaddr" 2 608 "void(int8 addr)" `425 
v L "stream" 2 609 "int8" `428 
v L "addr" 2 609 "int8" `429 
f G "i2c_slaveaddr" 2 609 "void(int8 stream,int8 addr)" `427 
f B "i2c_poll" 2 610 "int8()" `430 
v L "stream" 2 611 "int8" `432 
f G "i2c_poll" 2 611 "int8(int8 stream)" `431 
v L "baud" 2 612 "int32" `434 
f B "i2c_init" 2 612 "void(int32 baud)" `433 
v L "stream" 2 613 "int8" `436 
v L "baud" 2 613 "int32" `437 
f G "i2c_init" 2 613 "void(int8 stream,int32 baud)" `435  "#use spi() Prototypes:"
f B "spi_xfer" 2 616 "int8()" `438 
f G "spi_xfer" 2 617 "int16()" `439 
f G "spi_xfer" 2 618 "int32()" `440 
v L "data" 2 619 "int8" `442 
f G "spi_xfer" 2 619 "int8(int8 data)" `441 
v L "data" 2 620 "int16" `444 
f G "spi_xfer" 2 620 "int16(int16 data)" `443 
v L "data" 2 621 "int32" `446 
f G "spi_xfer" 2 621 "int32(int32 data)" `445 
v L "stream" 2 622 "int8" `448 
v L "data" 2 622 "int8" `449 
f G "spi_xfer" 2 622 "int8(int8 stream,int8 data)" `447 
v L "stream" 2 623 "int8" `448 
v L "data" 2 623 "int16" `452 
f G "spi_xfer" 2 623 "int16(int8 stream,int16 data)" `450 
v L "stream" 2 624 "int8" `448 
v L "data" 2 624 "int32" `455 
f G "spi_xfer" 2 624 "int32(int8 stream,int32 data)" `453 
v L "stream" 2 625 "int8" `457 
v L "data" 2 625 "int8" `458 
v L "bits" 2 625 "int8" `459 
f G "spi_xfer" 2 625 "int8(int8 stream,int8 data,int8 bits)" `456 
v L "stream" 2 626 "int8" `457 
v L "data" 2 626 "int16" `458 
v L "bits" 2 626 "int8" `463 
f G "spi_xfer" 2 626 "int16(int8 stream,int16 data,int8 bits)" `460 
v L "stream" 2 627 "int8" `457 
v L "data" 2 627 "int32" `458 
v L "bits" 2 627 "int8" `467 
f G "spi_xfer" 2 627 "int32(int8 stream,int32 data,int8 bits)" `464 
v L "baud" 2 628 "int32" `469 
f B "spi_init" 2 628 "void(int32 baud)" `468 
v L "stream" 2 629 "int8" `471 
v L "baud" 2 629 "int32" `472 
f G "spi_init" 2 629 "void(int8 stream,int32 baud)" `470 
v L "baud" 2 630 "int32" `474 
f B "spi_speed" 2 630 "void(int32 baud)" `473 
v L "stream" 2 631 "int8" `476 
v L "baud" 2 631 "int32" `477 
f G "spi_speed" 2 631 "void(int8 stream,int32 baud)" `475 
v L "stream" 2 632 "int8" `479 
v L "baud" 2 632 "int32" `480 
v L "clock" 2 632 "int32" `481 
f G "spi_speed" 2 632 "void(int8 stream,int32 baud,int32 clock)" `478 
v L "data" 2 633 "int8" `483 
f B "spi_prewrite" 2 633 "void(int8 data)" `482 
v L "data" 2 634 "int16" `485 
f G "spi_prewrite" 2 634 "void(int16 data)" `484 
v L "data" 2 635 "int32" `487 
f G "spi_prewrite" 2 635 "void(int32 data)" `486 
v L "??65535" 2 636 "int8" `489 
v L "data" 2 636 "int8" `490 
f G "spi_prewrite" 2 636 "void(int8 ,int8 data)" `488 
v L "??65535" 2 637 "int8" `489 
v L "data" 2 637 "int16" `493 
f G "spi_prewrite" 2 637 "void(int8 ,int16 data)" `491 
v L "??65535" 2 638 "int8" `489 
v L "data" 2 638 "int32" `496 
f G "spi_prewrite" 2 638 "void(int8 ,int32 data)" `494 
f B "spi_xfer_in" 2 639 "int8()" `497 
f G "spi_xfer_in" 2 640 "int16()" `498 
f G "spi_xfer_in" 2 641 "int32()" `499 
v L "bits" 2 642 "int8" `501 
f G "spi_xfer_in" 2 642 "int8(int8 bits)" `500 
v L "bits" 2 643 "int8" `503 
f G "spi_xfer_in" 2 643 "int16(int8 bits)" `502 
v L "bits" 2 644 "int8" `505 
f G "spi_xfer_in" 2 644 "int32(int8 bits)" `504 
v L "stream" 2 645 "int8" `507 
v L "bits" 2 645 "int8" `508 
f G "spi_xfer_in" 2 645 "int8(int8 stream,int8 bits)" `506 
v L "stream" 2 646 "int8" `507 
v L "bits" 2 646 "int8" `511 
f G "spi_xfer_in" 2 646 "int16(int8 stream,int8 bits)" `509 
v L "stream" 2 647 "int8" `507 
v L "bits" 2 647 "int8" `514 
f G "spi_xfer_in" 2 647 "int32(int8 stream,int8 bits)" `512  "#use rtos() Prototypes:"
f B "rtos_run" 2 650 "void()" `515 
f B "rtos_yield" 2 651 "void()" `516 
v L "task" 2 652 "int8" `518 
f B "rtos_enable" 2 652 "void(int8 task)" `517 
v L "task" 2 653 "int8" `520 
f B "rtos_disable" 2 653 "void(int8 task)" `519 
f B "rtos_terminate" 2 654 "void()" `521 
v L "flag" 2 655 "int8" `523 
f B "rtos_await" 2 655 "void(int8 flag)" `522 
v L "sem" 2 656 "int8" `525 
f B "rtos_wait" 2 656 "void(int8 sem)" `524 
v L "sem" 2 657 "int8" `527 
f B "rtos_signal" 2 657 "void(int8 sem)" `526 
v L "task" 2 658 "int8" `529 
v L "msg" 2 658 "int8" `530 
f B "rtos_msg_send" 2 658 "void(int8 task,int8 msg)" `528 
f B "rtos_msg_read" 2 659 "int8()" `531 
f B "rtos_msg_poll" 2 660 "int8()" `532 
v L "task" 2 661 "int8" `534 
f B "rtos_overrun" 2 661 "int8(int8 task)" `533 
v L "task" 2 662 "int8" `536 
v L "stat" 2 662 "*int8" `537 
f B "rtos_stats" 2 662 "void(int8 task,*int8 stat)" `535  "#use timer() Prototypes:"
f B "get_ticks" 2 665 "int8()" `538 
f G "get_ticks" 2 666 "int16()" `539 
f G "get_ticks" 2 667 "int32()" `540 
v L "stream" 2 668 "int8" `542 
f G "get_ticks" 2 668 "int8(int8 stream)" `541 
v L "stream" 2 669 "int8" `544 
f G "get_ticks" 2 669 "int16(int8 stream)" `543 
v L "stream" 2 670 "int8" `546 
f G "get_ticks" 2 670 "int32(int8 stream)" `545 
v L "value" 2 671 "int8" `548 
f B "set_ticks" 2 671 "void(int8 value)" `547 
v L "value" 2 672 "int16" `550 
f G "set_ticks" 2 672 "void(int16 value)" `549 
v L "value" 2 673 "int32" `552 
f G "set_ticks" 2 673 "void(int32 value)" `551 
v L "stream" 2 674 "int8" `554 
v L "value" 2 674 "int8" `555 
f G "set_ticks" 2 674 "void(int8 stream,int8 value)" `553 
v L "stream" 2 675 "int8" `554 
v L "value" 2 675 "int16" `558 
f G "set_ticks" 2 675 "void(int8 stream,int16 value)" `556 
v L "stream" 2 676 "int8" `554 
v L "value" 2 676 "int32" `561 
f G "set_ticks" 2 676 "void(int8 stream,int32 value)" `559  "#use pwm() Prototypes:"
f B "pwm_on" 2 679 "void()" `562 
v L "stream" 2 680 "int8" `564 
f G "pwm_on" 2 680 "void(int8 stream)" `563 
f B "pwm_off" 2 681 "void()" `565 
v L "stream" 2 682 "int8" `567 
f G "pwm_off" 2 682 "void(int8 stream)" `566 
v L "duty" 2 683 "int16" `569 
f B "pwm_set_duty" 2 683 "void(int16 duty)" `568 
v L "stream" 2 684 "int8" `571 
v L "duty" 2 684 "int16" `572 
f G "pwm_set_duty" 2 684 "void(int8 stream,int16 duty)" `570 
v L "percent" 2 685 "int16" `574 
f B "pwm_set_duty_percent" 2 685 "void(int16 percent)" `573 
v L "stream" 2 686 "int8" `576 
v L "percent" 2 686 "int16" `577 
f G "pwm_set_duty_percent" 2 686 "void(int8 stream,int16 percent)" `575 
v L "frequency" 2 687 "int32" `579 
f B "pwm_set_frequency" 2 687 "void(int32 frequency)" `578 
v L "stream" 2 688 "int8" `581 
v L "frequency" 2 688 "int32" `582 
f G "pwm_set_frequency" 2 688 "void(int8 stream,int32 frequency)" `580  "#use capture() Prototypes:"
f B "get_capture_time" 2 691 "int16()" `583 
v L "stream" 2 692 "int8" `585 
f G "get_capture_time" 2 692 "int16(int8 stream)" `584 
f B "get_capture_event" 2 693 "int8()" `586 
v L "stream" 2 694 "int8" `588 
f G "get_capture_event" 2 694 "int8(int8 stream)" `587  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 707 "int16" `590 
f B "goto_address" 2 707 "void(int16 address)" `589 
v L "label" 2 708 "int16" `592 
f B "label_address" 2 708 "int16(int16 label)" `591  "Program Memory Prototypes:"
v L "address" 2 711 "int16" `594 
v L "dataptr" 2 711 "*int8" `595 
v L "count" 2 711 "int16" `596 
f B "read_program_memory" 2 711 "void(int16 address,*int8 dataptr,int16 count)" `593 
v L "address" 2 712 "int16" `598 
f B "read_program_eeprom" 2 712 "int16(int16 address)" `597 
v L "address" 2 713 "int16" `600 
f B "erase_program_eeprom" 2 713 "void(int16 address)" `599 
v L "address" 2 714 "int16" `602 
v L "dataptr" 2 714 "*int8" `603 
v L "count" 2 714 "int16" `604 
f B "write_program_memory" 2 714 "void(int16 address,*int8 dataptr,int16 count)" `601 
v L "address" 2 715 "int16" `606 
v L "data" 2 715 "int16" `607 
f B "write_program_eeprom" 2 715 "void(int16 address,int16 data)" `605  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 720 "int16" `608 
v L "address" 2 725 "__EEADDRESS__" `610 
f B "read_eeprom" 2 725 "int8(__EEADDRESS__ address)" `609 
v L "address" 2 726 "__EEADDRESS__" `612 
v L "value" 2 726 "int8" `613 
f B "write_eeprom" 2 726 "void(__EEADDRESS__ address,int8 value)" `611  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 733 "int32" `615 
f B "enable_interrupts" 2 733 "void(int32 interrupt)" `614 
v L "interrupt" 2 734 "int32" `617 
f B "disable_interrupts" 2 734 "void(int32 interrupt)" `616 
v L "interrupt" 2 735 "int32" `619 
f B "clear_interrupt" 2 735 "void(int32 interrupt)" `618 
v L "interrupt" 2 736 "int32" `621 
f B "interrupt_active" 2 736 "int8(int32 interrupt)" `620 
v L "interrupt" 2 737 "int32" `623 
f B "interrupt_enabled" 2 737 "int8(int32 interrupt)" `622 
v L "source" 2 738 "int8" `625 
v L "edge" 2 738 "int8" `626 
f B "ext_int_edge" 2 738 "void(int8 source,int8 edge)" `624 
v L "address" 2 739 "int16" `628 
f B "jump_to_isr" 2 739 "void(int16 address)" `627  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 741 "0x40"
d G "H_TO_L" 2 742 "0"
d G "GLOBAL" 2 744 "0xF2C0"
d G "PERIPH" 2 745 "0xF240"
d G "INT_RTCC" 2 746 "0x00F220"
d G "INT_TIMER0" 2 747 "0x00F220"
d G "INT_TIMER1" 2 748 "0x009D01"
d G "INT_TIMER2" 2 749 "0x009D02"
d G "INT_TIMER3" 2 750 "0x00A002"
d G "INT_EXT_L2H" 2 751 "0x5000F210"
d G "INT_EXT_H2L" 2 752 "0x6000F210"
d G "INT_EXT" 2 753 "0x00F210"
d G "INT_EXT1_L2H" 2 754 "0x5001F008"
d G "INT_EXT1_H2L" 2 755 "0x6001F008"
d G "INT_EXT1" 2 756 "0x00F008"
d G "INT_EXT2_L2H" 2 757 "0x5002F010"
d G "INT_EXT2_H2L" 2 758 "0x6002F010"
d G "INT_EXT2" 2 759 "0x00F010"
d G "INT_RB" 2 760 "0x00FFF208"
d G "INT_AD" 2 761 "0x009D40"
d G "INT_RDA" 2 762 "0x009D20"
d G "INT_TBE" 2 763 "0x009D10"
d G "INT_SSP" 2 764 "0x009D08"
d G "INT_CCP1" 2 765 "0x009D04"
d G "INT_CCP2" 2 766 "0x00A001"
d G "INT_BUSCOL" 2 767 "0x00A008"
d G "INT_LOWVOLT" 2 768 "0x00A004"
d G "INT_COMP" 2 769 "0x00A040"
d G "INT_EEPROM" 2 770 "0x00A010"
d G "INT_OSCF" 2 771 "0x00A080"
d G "INT_USB" 2 772 "0x00A020"
D G "LED" 1 8 "PIN_B2"
D G "MOTOR" 1 9 "PIN_B3"
D G "SENSOR" 1 10 "PIN_B0"
D G "DELAY" 1 11 "500"
D G "USB_CONFIG_PID" 1 13 "0x000A"
D G "USB_CONFIG_VID" 1 14 "0x04d8"
D G "USB_CONFIG_BUS_POWER" 1 15 "100"
D G "USB_STRINGS_OVERWRITTEN" 1 16 ""
V G "USB_STRING_DESC_OFFSET" 1 18 "int8[1]" `633 
V G "USB_STRING_DESC" 1 20 "[1]" `634  "string 0 - language"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 2 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 1 22 1 "FUNCTION"
C L "jump_to_isr" 3 2 289 "FUNCTION"
f G "get_float_usb" 3 295 "float()" `637 
f G "get_long_usb" 3 296 "sint16()" `638 
f G "get_int_usb" 3 297 "sint8()" `639 
V L "s" 3 298 "*int8" `641 
V L "max" 3 298 "int8" `642 
f G "get_string_usb" 3 298 "void(*int8 s,int8 max)" `640 
f G "gethex_usb" 3 299 "int8()" `643 
f G "gethex1_usb" 3 300 "int8()" `644 
D G "usb_cdc_kbhit" 3 305 "() (usb_cdc_get_buffer_status.got)"
D G "usb_cdc_putempty" 3 306 "() ((usb_cdc_put_buffer_nextin==0) && usb_cdc_put_buffer_free())"
D G "usb_cdc_putready" 3 307 "() (sizeof(usb_cdc_put_buffer)-usb_cdc_put_buffer_nextin)"
D G "usb_cdc_connected" 3 308 "() (usb_cdc_got_set_line_coding)"
V L "c" 3 309 "int8" `646 
f G "usb_cdc_putc_fast" 3 309 "void(int8 c)" `645 
f G "usb_cdc_getc" 3 310 "int8()" `647 
V L "c" 3 311 "int8" `649 
f G "usb_cdc_putc" 3 311 "void(int8 c)" `648 
f G "usb_cdc_get_discard" 3 312 "void()" `650  "functions automatically called by USB handler code"
f G "usb_isr_tkn_cdc" 3 315 "void()" `651 
f G "usb_cdc_init" 3 316 "void()" `652 
f G "usb_isr_tok_out_cdc_control_dne" 3 317 "void()" `653 
f G "usb_isr_tok_in_cdc_data_dne" 3 318 "void()" `654 
f G "usb_isr_tok_out_cdc_data_dne" 3 319 "void()" `655 
f G "usb_cdc_flush_tx_buffer" 3 321 "void()" `656  "Include the CCS USB Libraries.  See the comments at the top of these"
D G "__USB_PIC_PERIF__" 3 330 "1"
D G "__PIC18_USB_H__" 4 136 ""
D G "__USB_HARDWARE__" 4 138 ""
D G "__PIC__" 4 141 "1"
D G "USB_USE_FULL_SPEED" 4 144 "1"
D G "USB_MAX_EP0_PACKET_LENGTH" 4 157 "64"
D G "__USB_HW_LAYER_H__" 5 34 ""
E G "USB_DTS_DATA1" 5 36 "1" `670 
E G "USB_DTS_TOGGLE" 5 36 "2" `671 
E G "USB_DTS_DATA0" 5 37 "0" `672 
E G "USB_DTS_STALL" 5 37 "3" `673 
E G "USB_DTS_USERX" 5 37 "4" `674  "USER LEVEL FUNCTIONS:"
C L "usb_cdc_flush_tx_buffer" 5 2 5 "FUNCTION"
f G "usb_init" 5 48 "void()" `675  "/* usb_init_cs()"
C L "usb_init" 5 2 4 "FUNCTION"
f G "usb_init_cs" 5 56 "void()" `676  "/* usb_task()"
C L "usb_init_cs" 5 2 4 "FUNCTION"
f G "usb_task" 5 64 "void()" `677  "/* usb_attach()"
C L "usb_task" 5 2 11 "FUNCTION"
f G "usb_attach" 5 79 "void()" `678  "/* usb_detach()"
C L "usb_attach" 5 2 14 "FUNCTION"
f G "usb_detach" 5 97 "void()" `679  "/* usb_put_packet()"
C L "usb_detach" 5 2 27 "FUNCTION"
V L "endpoint" 5 128 "int8" `681 
V L "ptr" 5 128 "*int8" `682 
V L "len" 5 128 "int16" `683 
V L "tgl" 5 128 "USB_DTS_BIT" `684 
f G "usb_put_packet" 5 128 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `680  "/* usb_get_packet(endpoint, *ptr, max)"
C L "usb_put_packet" 5 2 22 "FUNCTION"
V L "endpoint" 5 154 "int8" `686 
V L "ptr" 5 154 "*int8" `687 
V L "max" 5 154 "int16" `688 
f G "usb_get_packet" 5 154 "int16(int8 endpoint,*int8 ptr,int16 max)" `685  "/* usb_kbhit(endpoint)"
C L "usb_get_packet" 5 2 12 "FUNCTION"
V L "en" 5 170 "int8" `690 
f G "usb_kbhit" 5 170 "int8(int8 en)" `689  "/* usb_tbe(endpoint)"
C L "usb_kbhit" 5 2 13 "FUNCTION"
V L "en" 5 187 "int8" `692 
f G "usb_tbe" 5 187 "int8(int8 en)" `691  "END USER LEVEL FUNCTIONS /////////////////////////////////////"
C L "usb_tbe" 5 2 16 "FUNCTION"
V L "endpoint" 5 212 "int8" `694 
f G "usb_stall_ep" 5 212 "void(int8 endpoint)" `693  "/* usb_unstall_ep(endpoint, direction)"
C L "usb_stall_ep" 5 2 10 "FUNCTION"
V L "endpoint" 5 227 "int8" `696 
f G "usb_unstall_ep" 5 227 "void(int8 endpoint)" `695  "/* usb_endpoint_stalled()"
C L "usb_unstall_ep" 5 2 15 "FUNCTION"
V L "endpoint" 5 246 "int8" `698 
f G "usb_endpoint_stalled" 5 246 "int8(int8 endpoint)" `697  "/* usb_set_address(address)"
C L "usb_endpoint_stalled" 5 2 7 "FUNCTION"
V L "address" 5 257 "int8" `700 
f G "usb_set_address" 5 257 "void(int8 address)" `699  "/* usb_set_configured()"
C L "usb_set_address" 5 2 10 "FUNCTION"
V L "config" 5 271 "int8" `702 
f G "usb_set_configured" 5 271 "void(int8 config)" `701  "/* usb_disable_endpoints()"
C L "usb_set_configured" 5 2 4 "FUNCTION"
f G "usb_disable_endpoints" 5 279 "void()" `703  "/* usb_disable_endpoint()"
C L "usb_disable_endpoints" 5 2 6 "FUNCTION"
V L "en" 5 290 "int8" `705 
f G "usb_disable_endpoint" 5 290 "void(int8 en)" `704  "/* usb_request_send_response(len)"
C L "usb_disable_endpoint" 5 2 28 "FUNCTION"
V L "len" 5 322 "int8" `707 
f G "usb_request_send_response" 5 322 "void(int8 len)" `706 
f G "usb_request_get_data" 5 323 "void()" `708 
f G "usb_request_stall" 5 324 "void()" `709  "EXTRA USER FUNCTIONS /////////////////////////////////"
C L "usb_request_stall" 4 178 15 "FUNCTION"
V L "endpoint" 4 194 "int8" `711 
V L "len" 4 194 "int16" `712 
V L "tgl" 4 194 "USB_DTS_BIT" `713 
f G "usb_flush_in" 4 194 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `710  "/* usb_flush_out()"
C L "usb_flush_in" 4 178 13 "FUNCTION"
V L "endpoint" 4 211 "int8" `715 
V L "tgl" 4 211 "USB_DTS_BIT" `716 
f G "usb_flush_out" 4 211 "void(int8 endpoint,USB_DTS_BIT tgl)" `714  "/* usb_rx_packet_size()"
C L "usb_flush_out" 4 178 10 "FUNCTION"
V L "endpoint" 4 225 "int8" `718 
f G "usb_rx_packet_size" 4 225 "int16(int8 endpoint)" `717  "usb_desc_cdc.h                            ////"
D G "__USB_DESCRIPTORS__" 6 42 ""
D G "USB_CONFIG_VERSION" 6 57 "0x0100" "01.00  //range is 00.00 to 99.99"
D G "USB_HID_DEVICE" 6 61 "FALSE"
D G "USB_CDC_DEVICE" 6 62 "TRUE"
D G "USB_CDC_COMM_IN_ENDPOINT" 6 64 "1"
D G "USB_CDC_COMM_IN_SIZE" 6 66 "11"
D G "USB_EP1_TX_ENABLE" 6 68 "USB_ENABLE_INTERRUPT"
D G "USB_EP1_TX_SIZE" 6 69 "USB_CDC_COMM_IN_SIZE"
D G "USB_CDC_DATA_IN_ENDPOINT" 6 72 "2"
D G "USB_CDC_DATA_IN_SIZE" 6 74 "64"
D G "USB_EP2_TX_ENABLE" 6 76 "USB_ENABLE_BULK"
D G "USB_EP2_TX_SIZE" 6 77 "USB_CDC_DATA_IN_SIZE"
D G "USB_CDC_DATA_OUT_ENDPOINT" 6 80 "2"
D G "USB_CDC_DATA_OUT_SIZE" 6 82 "64"
D G "USB_EP2_RX_ENABLE" 6 84 "USB_ENABLE_BULK"
D G "USB_EP2_RX_SIZE" 6 85 "USB_CDC_DATA_OUT_SIZE"
D G "__USB_PROTOTYPES__" 7 301 ""
D G "USB_HID_BOOT_PROTOCOL" 7 311 "FALSE"
D G "USB_HID_IDLE" 7 315 "FALSE"
D G "USB_OPT_FOR_ROM" 7 329 "TRUE"
C L "usb_rx_packet_size" 7 2 9 "FUNCTION"
f G "usb_enumerated" 7 348 "int8()" `719  "/* usb_wait_for_enumeration()"
C L "usb_enumerated" 7 2 6 "FUNCTION"
f G "usb_wait_for_enumeration" 7 358 "void()" `720  "/* usb_gets(endpoint, ptr, max, timeout)"
C L "usb_wait_for_enumeration" 7 2 14 "FUNCTION"
V L "endpoint" 7 376 "int8" `722 
V L "ptr" 7 376 "*int8" `723 
V L "max" 7 376 "int16" `724 
V L "timeout" 7 376 "int16" `725 
f G "usb_gets" 7 376 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `721  "/* usb_puts()"
C L "usb_gets" 7 2 16 "FUNCTION"
V L "endpoint" 7 396 "int8" `727 
V L "ptr" 7 396 "*int8" `728 
V L "len" 7 396 "int16" `729 
V L "timeout" 7 396 "int8" `730 
f G "usb_puts" 7 396 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `726  "/* usb_attached()"
D G "usb_attached" 7 408 "() TRUE"
C L "usb_puts" 7 2 10 "FUNCTION"
V L "endpoint" 7 422 "int8" `732 
f G "usb_endpoint_is_valid" 7 422 "int8(int8 endpoint)" `731  "END USER-LEVEL API /////////////////////////////////////////////////////"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
E G "GET_DESCRIPTOR" 7 430 "1" `734 
E G "SET_ADDRESS" 7 430 "2" `735 
E G "NONE" 7 430 "0" `736 
E G "USB_GETDESC_CONFIG_TYPE" 7 432 "0" `738 
E G "USB_GETDESC_HIDREPORT_TYPE" 7 432 "1" `739 
E G "USB_GETDESC_STRING_TYPE" 7 432 "2" `740 
E G "USB_GETDESC_DEVICE_TYPE" 7 432 "3" `741 
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 2 1 "FUNCTION"
T G "TYPE_USB_STACK_STATUS" 7 440 "{USB_STATES dev_req,int8 curr_config,int8 status_device,USB_GETDESC_TYPES getdesc_type}" `747 
V G "USB_stack_status" 7 450 "TYPE_USB_STACK_STATUS" `748  "/* usb_token_reset()"
C L "usb_endpoint_is_valid" 7 2 5 "FUNCTION"
f G "usb_token_reset" 7 459 "void()" `749  "/* usb_isr_tok_setup_dne()"
C L "usb_token_reset" 7 2 31 "FUNCTION"
f G "usb_isr_tok_setup_dne" 7 494 "void()" `750  "/* usb_isr_tok_out_dne()"
C L "usb_isr_tok_setup_dne" 7 2 10 "FUNCTION"
V L "endpoint" 7 508 "int8" `752 
f G "usb_isr_tok_out_dne" 7 508 "void(int8 endpoint)" `751  "/* usb_isr_tok_in_dne(endpoint)"
C L "usb_isr_tok_out_dne" 7 2 10 "FUNCTION"
V L "endpoint" 7 522 "int8" `754 
f G "usb_isr_tok_in_dne" 7 522 "void(int8 endpoint)" `753  "END STACK-LEVEL API USED BY HW DRIVERS /////////////////////////////////"
D G "USB_NUM_CONFIGURATIONS" 7 528 "1" "DO NOT CHANGE"
D G "PID_IN" 7 531 "0x09" "device to host transactions"
D G "PID_OUT" 7 532 "0x01" "host to device transactions"
D G "PID_SETUP" 7 533 "0x0D" "host to device setup transaction"
D G "PID_ACK" 7 534 "0x02" "receiver accepts error-free data packet"
D G "PID_DATA0" 7 535 "0x03" "data packet with even sync bit"
D G "PID_SOF" 7 536 "0x05" "start of framer marker and frame number"
D G "PID_NAK" 7 537 "0x0A" "receiver can't accept data or sender cant send data or has no data to transmit"
D G "PID_DATA1" 7 538 "0x0B" "data packet with odd sync bit"
D G "PID_PRE" 7 539 "0x0C" "preamble issued by host.  enables downstream traffic to low-speed device"
D G "PID_STALL" 7 540 "0x0E" "a control request isnt supported or the endpoint is halted"
D G "USB_DESC_DEVICE_TYPE" 7 543 "0x01" "#DEFINE USB_DEVICE_DESC_KEY      0x01"
D G "USB_DESC_CONFIG_TYPE" 7 544 "0x02" "#DEFINE USB_CONFIG_DESC_KEY      0x02"
D G "USB_DESC_STRING_TYPE" 7 545 "0x03" "#DEFINE USB_STRING_DESC_KEY      0x03"
D G "USB_DESC_INTERFACE_TYPE" 7 546 "0x04" "#DEFINE USB_INTERFACE_DESC_KEY   0x04"
D G "USB_DESC_ENDPOINT_TYPE" 7 547 "0x05" "#DEFINE USB_ENDPOINT_DESC_KEY    0x05"
D G "USB_DESC_CLASS_TYPE" 7 548 "0x21" "#DEFINE USB_CLASS_DESC_KEY       0x21"
D G "USB_DESC_HIDREPORT_TYPE" 7 549 "0x22"
D G "USB_DESC_IAD_TYPE" 7 550 "0x0b"
D G "USB_DESC_DEVICE_LEN" 7 553 "18" "#DEFINE USB_DEVICE_DESC_LEN      18"
D G "USB_DESC_CONFIG_LEN" 7 554 "9" "#DEFINE USB_CONFIG_DESC_LEN      9"
D G "USB_DESC_INTERFACE_LEN" 7 555 "9" "#DEFINE USB_INTERFACE_DESC_LEN   9"
D G "USB_DESC_CLASS_LEN" 7 556 "9" "#DEFINE USB_CLASS_DESC_LEN       9"
D G "USB_DESC_ENDPOINT_LEN" 7 557 "7" "#DEFINE USB_ENDPOINT_DESC_LEN    7"
D G "USB_DESC_IAD_LEN" 7 558 "8"
D G "USB_STANDARD_REQUEST_GET_STATUS" 7 561 "0x00"
D G "USB_STANDARD_REQUEST_CLEAR_FEATURE" 7 562 "0x01"
D G "USB_STANDARD_REQUEST_SET_FEATURE" 7 563 "0x03"
D G "USB_STANDARD_REQUEST_SET_ADDRESS" 7 564 "0x05"
D G "USB_STANDARD_REQUEST_GET_DESCRIPTOR" 7 565 "0x06"
D G "USB_STANDARD_REQUEST_SET_DESCRIPTOR" 7 566 "0x07"
D G "USB_STANDARD_REQUEST_GET_CONFIGURATION" 7 567 "0x08"
D G "USB_STANDARD_REQUEST_SET_CONFIGURATION" 7 568 "0x09"
D G "USB_STANDARD_REQUEST_GET_INTERFACE" 7 569 "0x0A"
D G "USB_STANDARD_REQUEST_SET_INTERFACE" 7 570 "0x0B"
D G "USB_STANDARD_REQUEST_SYNCH_FRAME" 7 571 "0x0C"
D G "USB_HID_REQUEST_GET_REPORT" 7 574 "0x01"
D G "USB_HID_REQUEST_GET_IDLE" 7 575 "0x02"
D G "USB_HID_REQUEST_GET_PROTOCOL" 7 576 "0x03"
D G "USB_HID_REQUEST_SET_REPORT" 7 577 "0x09"
D G "USB_HID_REQUEST_SET_IDLE" 7 578 "0x0A"
D G "USB_HID_REQUEST_SET_PROTOCOL" 7 579 "0x0B"
D G "USB_ENDPOINT_TYPE_CONTROL" 7 582 "0x00"
D G "USB_ENDPOINT_TYPE_ISOCHRONOUS" 7 583 "0x01"
D G "USB_ENDPOINT_TYPE_BULK" 7 584 "0x02"
D G "USB_ENDPOINT_TYPE_INTERRUPT" 7 585 "0x03"
D G "USB_ENABLE_DISABLED" 7 588 "-1"
D G "USB_ENABLE_BULK" 7 589 "USB_ENDPOINT_TYPE_BULK"
D G "USB_ENABLE_ISOCHRONOUS" 7 590 "USB_ENDPOINT_TYPE_ISOCHRONOUS"
D G "USB_ENABLE_INTERRUPT" 7 591 "USB_ENDPOINT_TYPE_INTERRUPT"
D G "USB_ENABLE_CONTROL" 7 592 "USB_ENDPOINT_TYPE_CONTROL"
D G "USB_EP0_TX_ENABLE" 7 597 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_ENABLE" 7 598 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_SIZE" 7 599 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP0_TX_SIZE" 7 600 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP1_RX_ENABLE" 7 607 "USB_ENABLE_DISABLED"
D G "USB_EP1_RX_SIZE" 7 614 "0"
D G "USB_EP3_TX_ENABLE" 7 666 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_ENABLE" 7 669 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_SIZE" 7 676 "0"
D G "USB_EP3_TX_SIZE" 7 687 "0"
D G "USB_EP4_TX_ENABLE" 7 697 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_ENABLE" 7 700 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_SIZE" 7 707 "0"
D G "USB_EP4_TX_SIZE" 7 718 "0"
D G "USB_EP5_TX_ENABLE" 7 728 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_ENABLE" 7 731 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_SIZE" 7 738 "0"
D G "USB_EP5_TX_SIZE" 7 749 "0"
D G "USB_EP6_TX_ENABLE" 7 759 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_ENABLE" 7 762 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_SIZE" 7 769 "0"
D G "USB_EP6_TX_SIZE" 7 780 "0"
D G "USB_EP7_TX_ENABLE" 7 790 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_ENABLE" 7 793 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_SIZE" 7 800 "0"
D G "USB_EP7_TX_SIZE" 7 811 "0"
D G "USB_EP8_TX_ENABLE" 7 821 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_ENABLE" 7 824 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_SIZE" 7 831 "0"
D G "USB_EP8_TX_SIZE" 7 842 "0"
D G "USB_EP9_TX_ENABLE" 7 852 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_ENABLE" 7 855 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_SIZE" 7 862 "0"
D G "USB_EP9_TX_SIZE" 7 873 "0"
D G "USB_EP10_TX_ENABLE" 7 883 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_ENABLE" 7 886 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_SIZE" 7 893 "0"
D G "USB_EP10_TX_SIZE" 7 904 "0"
D G "USB_EP11_TX_ENABLE" 7 914 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_ENABLE" 7 917 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_SIZE" 7 924 "0"
D G "USB_EP11_TX_SIZE" 7 935 "0"
D G "USB_EP12_TX_ENABLE" 7 945 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_ENABLE" 7 948 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_SIZE" 7 955 "0"
D G "USB_EP12_TX_SIZE" 7 966 "0"
D G "USB_EP13_TX_ENABLE" 7 976 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_ENABLE" 7 979 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_SIZE" 7 986 "0"
D G "USB_EP13_TX_SIZE" 7 997 "0"
D G "USB_EP14_TX_ENABLE" 7 1007 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_ENABLE" 7 1010 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_SIZE" 7 1017 "0"
D G "USB_EP14_TX_SIZE" 7 1028 "0"
D G "USB_EP15_TX_ENABLE" 7 1038 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_ENABLE" 7 1041 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_SIZE" 7 1048 "0"
D G "USB_EP15_TX_SIZE" 7 1059 "0"
V G "usb_ep_tx_type" 7 1066 "[16]" `755 
V G "usb_ep_rx_type" 7 1075 "[16]" `758 
V G "usb_ep_tx_size" 7 1084 "[16]" `761 
V G "usb_ep_rx_size" 7 1093 "[16]" `764 
D G "USB_TOTAL_CONFIG_LEN" 6 97 "67" "config+interface+class+endpoint+endpoint (2 endpoints)"
V G "USB_CONFIG_DESC" 6 99 "[1]" `767  "IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE:"
C L "usb_isr_tok_in_dne" 6 91 5 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 91 1 "FUNCTION"
D G "USB_MAX_NUM_INTERFACES" 6 200 "2"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
V G "USB_NUM_INTERFACES" 6 203 "[1]" `770 
C L "usb_isr_tok_in_dne" 6 194 5 "FUNCTION"
V G "USB_CLASS_DESCRIPTORS" 6 210 "[1][2][4]" `773  "config 1"
C L "usb_isr_tok_in_dne" 6 194 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
V G "USB_DEVICE_DESC" 6 232 "[18]" `778  "starts of with device configuration. only one possible"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 6 194 5 "FUNCTION"
V G "usb_cdc_get_buffer_status" 3 357 "{int1 got,int8 len,int8 index}" `785  "usb.c                                 ////"
D G "__USB_DRIVER__" 8 162 ""
D G "debug_usb" 8 181 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "debug_putc" 8 182 "(c)"
D G "debug_display_ram" 8 183 "(x,y)"
C L "usb_isr_tok_in_dne" 7 2 294 "FUNCTION"
D G "__PIC18_USB_C__" 9 120 ""
C L "usb_isr_tok_in_dne" 7 2 294 "FUNCTION"
D G "USB_IGNORE_RX_DTS" 9 130 "FALSE"
D G "USB_IGNORE_TX_DTS" 9 134 "FALSE"
D G "__USB_4550__" 9 194 ""
D G "USB_TOTAL_RAM_SPACE" 9 195 " ((unsigned int16)0x400)"
D G "USB_RAM_START" 9 196 "0x400"
D G "USB_NUM_UEP" 9 197 "16"
D G "USB_LAST_ALLOWED_ENDPOINT" 9 198 "16"
D G "USB_LAST_DEFINED_ENDPOINT" 9 256 "2"
D G "USB_CONTROL_REGISTER_SIZE" 9 263 " ((USB_LAST_DEFINED_ENDPOINT+1)*8)"
D G "USB_DATA_BUFFER_NEEDED" 9 265 " (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE)"
T G "STRUCT_BD" 9 286 "{int8 stat,int8 cnt,int16 addr}" `859 
C L "usb_isr_tok_in_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 9 126 1 "FUNCTION"
V G "g_USBRAM" 9 325 "{}" `874 
D G "USB_DATA_BUFFER_LOCATION" 9 327 " ((int8*)&g_USBRAM.buffer)"
D G "g_USBBDT" 9 331 "g_USBRAM.bd"
D G "usb_ep0_rx_buffer" 9 381 "g_USBRAM.buffer.ep0_rx_buffer"
D G "usb_ep0_tx_buffer" 9 382 "g_USBRAM.buffer.ep0_tx_buffer"
D G "usb_ep1_rx_buffer" 9 385 "g_USBRAM.buffer.ep1_rx_buffer"
D G "usb_ep1_tx_buffer" 9 386 "g_USBRAM.buffer.ep1_tx_buffer"
D G "usb_ep2_rx_buffer" 9 387 "g_USBRAM.buffer.ep2_rx_buffer"
D G "usb_ep2_tx_buffer" 9 388 "g_USBRAM.buffer.ep2_tx_buffer"
D G "USB_USE_ERROR_COUNTER" 9 393 "FALSE"
D G "USB_PING_PONG_MODE_OFF" 9 396 "0" "no ping pong"
D G "USB_PING_PONG_MODE_E0" 9 397 "1" "ping pong endpoint 0 only"
D G "USB_PING_PONG_MODE_ON" 9 398 "2" "ping pong all endpoints"
D G "USB_PING_PONG_MODE" 9 402 "USB_PING_PONG_MODE_OFF"
C L "usb_isr_tok_in_dne" 9 126 1 "FUNCTION"
D G "UEP0_LOC" 9 421 "0xF70"
V G "USTATCopy" 9 471 "int8" `885 
V G "g_UEP" 9 473 "int8[16]" `886 
D G "UEP" 9 479 "(x) g_UEP[x]"
D G "BIT_SOF" 9 481 "6"
D G "BIT_STALL" 9 482 "5"
D G "BIT_IDLE" 9 483 "4"
D G "BIT_TRN" 9 484 "3"
D G "BIT_ACTV" 9 485 "2"
D G "BIT_UERR" 9 486 "1"
D G "BIT_URST" 9 487 "0"
D G "EP_BDxST_O" 9 515 "(x)    g_USBBDT[x].out.stat"
D G "EP_BDxCNT_O" 9 516 "(x)   g_USBBDT[x].out.cnt"
D G "EP_BDxADR_O" 9 517 "(x)   g_USBBDT[x].out.addr"
D G "EP_BDxST_I" 9 518 "(x)    g_USBBDT[x].in.stat"
D G "EP_BDxCNT_I" 9 519 "(x)   g_USBBDT[x].in.cnt"
D G "EP_BDxADR_I" 9 520 "(x)   g_USBBDT[x].in.addr"
D G "ENDPT_DISABLED" 9 526 "0x00" "endpoint not used"
D G "ENDPT_IN_ONLY" 9 527 "0x02" "endpoint supports IN transactions only"
D G "ENDPT_OUT_ONLY" 9 528 "0x04" "endpoint supports OUT transactions only"
D G "ENDPT_CONTROL" 9 529 "0x06" "Supports IN, OUT and CONTROL transactions - Only use with EP0"
D G "ENDPT_NON_CONTROL" 9 530 "0x0E" "Supports both IN and OUT transactions"
C L "usb_isr_tok_in_dne" 9 126 1 "FUNCTION"
E G "USB_STATE_DETACHED" 9 533 "0" `908 
E G "USB_STATE_ATTACHED" 9 533 "1" `909 
E G "USB_STATE_POWERED" 9 533 "2" `910 
E G "USB_STATE_DEFAULT" 9 534 "3" `911 
E G "USB_STATE_ADDRESS" 9 534 "4" `912 
E G "USB_STATE_CONFIGURED" 9 534 "5" `913 
V G "usb_state" 9 534 "" `914  "--BDendST has their PIDs upshifed 2"
D G "USB_PIC_PID_IN" 9 537 "0x24" "device to host transactions"
D G "USB_PIC_PID_OUT" 9 538 "0x04" "host to device transactions"
D G "USB_PIC_PID_SETUP" 9 539 "0x34" "host to device setup transaction"
D G "USTAT_IN_E0" 9 541 "4"
D G "USTAT_OUT_SETUP_E0" 9 542 "0"
D G "__USB_UIF_RESET" 9 544 "0x01"
D G "__USB_UIF_ERROR" 9 545 "0x02"
D G "__USB_UIF_ACTIVE" 9 546 "0x04"
D G "__USB_UIF_TOKEN" 9 547 "0x08"
D G "__USB_UIF_IDLE" 9 548 "0x10"
D G "__USB_UIF_STALL" 9 549 "0x20"
D G "__USB_UIF_SOF" 9 550 "0x40"
D G "STANDARD_INTS" 9 555 "__USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET"
D G "__USB_UCFG_UTEYE" 9 558 "0x80"
D G "__USB_UCFG_UOEMON" 9 560 "0x40"
D G "__USB_UCFG_UPUEN" 9 562 "0x10"
D G "__USB_UCFG_UTRDIS" 9 564 "0x08"
D G "__USB_UCFG_FSEN" 9 566 "0x04"
D G "__USB_UCFG_MY_UPUEN" 9 577 "__USB_UCFG_UPUEN"
D G "__UCFG_VAL_ENABLED__" 9 581 " (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE)"
D G "__UCFG_VAL_DISABLED__" 9 587 "__USB_UCFG_UTRDIS"
V G "__setup_0_tx_size" 9 593 "int8" `915  "interrupt handler, specific to PIC18Fxx5x peripheral only"
f G "usb_handle_interrupt" 9 596 "void()" `916 
f G "usb_isr_rst" 9 597 "void()" `917 
f G "usb_isr_uerr" 9 598 "void()" `918 
f G "usb_isr_sof" 9 599 "void()" `919 
f G "usb_isr_activity" 9 600 "void()" `920 
f G "usb_isr_uidle" 9 601 "void()" `921 
f G "usb_isr_tok_dne" 9 602 "void()" `922 
f G "usb_isr_stall" 9 603 "void()" `923 
f G "usb_init_ep0_setup" 9 604 "void()" `924  "BEGIN User Functions:"
C L "usb_init_ep0_setup" 9 126 1 "FUNCTION"
V L "en" 9 613 "int8" `926 
F G "usb_kbhit" 9 614 "int8(int8 en)" `689 
C L "usb_tbe" 9 126 1 "FUNCTION"
V L "en" 9 619 "int8" `929 
F G "usb_tbe" 9 620 "int8(int8 en)" `691 
C L "usb_detach" 9 126 1 "FUNCTION"
F G "usb_detach" 9 626 "void()" `679 
C L "usb_detach" 9 126 1 "FUNCTION"
C L "usb_detach" 9 126 1 "FUNCTION"
C L "usb_detach" 9 126 1 "FUNCTION"
C L "usb_detach" 9 126 2 "FUNCTION"
C L "usb_attach" 9 126 1 "FUNCTION"
F G "usb_attach" 9 652 "void()" `678 
C L "usb_attach" 9 126 1 "FUNCTION"
C L "usb_attach" 9 126 1 "FUNCTION"
C L "usb_attach" 9 126 1 "FUNCTION"
C L "usb_init_cs" 9 126 1 "FUNCTION"
F G "usb_init_cs" 9 669 "void()" `676 
C L "usb_task" 9 126 1 "FUNCTION"
F G "usb_task" 9 675 "void()" `677 
C L "usb_task" 9 126 1 "FUNCTION"
C L "usb_init" 9 126 1 "FUNCTION"
F G "usb_init" 9 726 "void()" `675 
C L "usb_flush_in" 9 126 1 "FUNCTION"
V L "endpoint" 9 737 "int8" `711 
V L "len" 9 737 "int16" `712 
V L "tgl" 9 737 "USB_DTS_BIT" `931 
F G "usb_flush_in" 9 738 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `710 
V L "i" 9 739 "int8" `928 
C L "usb_flush_in" 9 126 1 "FUNCTION"
C L "usb_flush_in" 9 126 1 "FUNCTION"
C L "usb_flush_in" 9 126 1 "FUNCTION"
C L "usb_flush_in" 9 126 1 "FUNCTION"
C L "usb_flush_in" 9 126 2 "FUNCTION"
C L "usb_flush_in" 9 126 2 "FUNCTION"
C L "usb_flush_in" 9 126 1 "FUNCTION"
C L "usb_put_packet" 9 126 1 "FUNCTION"
V L "endpoint" 9 795 "int8" `681 
V L "ptr" 9 795 "*int8" `682 
V L "len" 9 795 "int16" `683 
V L "tgl" 9 795 "USB_DTS_BIT" `933 
F G "usb_put_packet" 9 796 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `680 
V L "buff_add" 9 797 "*int8" `929 
C L "usb_put_packet" 9 126 2 "FUNCTION"
C L "usb_flush_out" 9 126 1 "FUNCTION"
V L "endpoint" 9 817 "int8" `715 
V L "tgl" 9 817 "USB_DTS_BIT" `932 
F G "usb_flush_out" 9 818 "void(int8 endpoint,USB_DTS_BIT tgl)" `714 
V L "i" 9 819 "int8" `930 
V L "len" 9 820 "int16" `931 
C L "usb_flush_out" 9 126 1 "FUNCTION"
C L "usb_flush_out" 9 126 1 "FUNCTION"
C L "usb_flush_out" 9 126 1 "FUNCTION"
C L "usb_flush_out" 9 126 1 "FUNCTION"
C L "usb_flush_out" 9 126 1 "FUNCTION"
C L "usb_flush_out" 9 126 2 "FUNCTION"
C L "usb_rx_packet_size" 9 126 1 "FUNCTION"
V L "endpoint" 9 863 "int8" `933 
F G "usb_rx_packet_size" 9 864 "int16(int8 endpoint)" `717 
C L "usb_get_packet_buffer" 9 126 17 "FUNCTION"
V L "endpoint" 9 889 "int8" `933 
V L "ptr" 9 889 "*int8" `934 
V L "max" 9 889 "int16" `935 
F G "usb_get_packet_buffer" 9 890 "int16(int8 endpoint,*int8 ptr,int16 max)" `932 
V L "al" 9 891 "*int8" `936 
V L "st" 9 892 "int8" `937 
V L "i" 9 893 "int16" `938 
C L "usb_get_packet_buffer" 9 126 1 "FUNCTION"
C L "usb_get_packet" 9 126 1 "FUNCTION"
V L "endpoint" 9 911 "int8" `686 
V L "ptr" 9 911 "*int8" `687 
V L "max" 9 911 "int16" `942 
F G "usb_get_packet" 9 912 "int16(int8 endpoint,*int8 ptr,int16 max)" `685 
C L "usb_stall_ep" 9 126 1 "FUNCTION"
V L "endpoint" 9 920 "int8" `940 
F G "usb_stall_ep" 9 921 "void(int8 endpoint)" `693 
V L "direction" 9 922 "int1" `939 
C L "usb_unstall_ep" 9 126 1 "FUNCTION"
V L "endpoint" 9 938 "int8" `941 
F G "usb_unstall_ep" 9 939 "void(int8 endpoint)" `695 
V L "direction" 9 940 "int1" `940 
C L "usb_endpoint_stalled" 9 126 1 "FUNCTION"
V L "endpoint" 9 960 "int8" `942 
F G "usb_endpoint_stalled" 9 961 "int8(int8 endpoint)" `697 
V L "direction" 9 962 "int1" `941 
V L "st" 9 963 "int8" `942 
C L "usb_set_address" 9 126 1 "FUNCTION"
V L "address" 9 981 "int8" `944 
F G "usb_set_address" 9 982 "void(int8 address)" `699 
C L "usb_set_configured" 9 126 1 "FUNCTION"
V L "config" 9 996 "int8" `944 
F G "usb_set_configured" 9 997 "void(int8 config)" `701 
V L "en" 9 998 "int8" `943 
V L "addy" 9 999 "int16" `944 
V L "new_uep" 9 1000 "int8" `945 
V L "len" 9 1001 "int16" `946 
V L "i" 9 1002 "int8" `947 
C L "usb_set_configured" 9 126 1 "FUNCTION"
C L "usb_set_configured" 9 126 1 "FUNCTION"
C L "usb_set_configured" 9 126 1 "FUNCTION"
C L "usb_disable_endpoint" 9 126 1 "FUNCTION"
V L "en" 9 1052 "int8" `949 
F G "usb_disable_endpoint" 9 1053 "void(int8 en)" `704 
C L "usb_disable_endpoint" 9 126 1 "FUNCTION"
C L "usb_disable_endpoint" 9 126 1 "FUNCTION"
C L "usb_disable_endpoints" 9 126 1 "FUNCTION"
F G "usb_disable_endpoints" 9 1065 "void()" `703 
V L "i" 9 1066 "int8" `948 
C L "usb_disable_endpoints" 9 126 1 "FUNCTION"
C L "usb_clear_trn" 9 126 2 "FUNCTION"
F G "usb_clear_trn" 9 1080 "void()" `949  "UIR_TRN = 0;"
C L "usb_clear_trn" 9 126 1 "FUNCTION"
F G "usb_isr" 9 1104 "void()" `950 
V L "TRNAttempts" 9 1105 "int8" `951 
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr" 9 126 1 "FUNCTION"
C L "usb_isr_sof" 9 126 1 "FUNCTION"
F G "usb_isr_sof" 9 1154 "void()" `919  "UIR_SOF = 0;"
C L "usb_isr_rst" 9 126 6 "FUNCTION"
F G "usb_isr_rst" 9 1169 "void()" `917 
C L "usb_isr_rst" 9 126 1 "FUNCTION"
C L "usb_isr_rst" 9 126 1 "FUNCTION"
C L "usb_init_ep0_setup" 9 126 5 "FUNCTION"
F G "usb_init_ep0_setup" 9 1204 "void()" `924 
C L "usb_init_ep0_setup" 9 126 1 "FUNCTION"
C L "usb_isr_uerr" 9 126 7 "FUNCTION"
F G "usb_isr_uerr" 9 1226 "void()" `918 
C L "usb_isr_uerr" 9 126 1 "FUNCTION"
C L "usb_isr_uidle" 9 126 5 "FUNCTION"
F G "usb_isr_uidle" 9 1292 "void()" `921 
C L "usb_isr_uidle" 9 126 2 "FUNCTION"
C L "usb_isr_uidle" 9 126 1 "FUNCTION"
C L "usb_isr_activity" 9 126 6 "FUNCTION"
F G "usb_isr_activity" 9 1312 "void()" `920 
C L "usb_isr_activity" 9 126 1 "FUNCTION"
C L "usb_isr_activity" 9 126 1 "FUNCTION"
C L "usb_isr_activity" 9 126 1 "FUNCTION"
C L "usb_isr_stall" 9 126 5 "FUNCTION"
F G "usb_isr_stall" 9 1332 "void()" `923 
C L "usb_isr_stall" 9 126 1 "FUNCTION"
C L "usb_request_send_response" 9 126 1 "FUNCTION"
V L "len" 9 1347 "int8" `953 
F G "usb_request_send_response" 9 1347 "void(int8 len)" `706 
F G "usb_request_get_data" 9 1348 "void()" `708 
F G "usb_request_stall" 9 1349 "void()" `709 
C L "usb_isr_tok_dne" 9 126 13 "FUNCTION"
F G "usb_isr_tok_dne" 9 1366 "void()" `922 
V L "en" 9 1367 "int8" `952 
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
V L "pidKey" 9 1377 "int8" `953 
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 4 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 2 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 2 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
C L "usb_isr_tok_dne" 9 126 1 "FUNCTION"
D G "USB_ISO_PACKET_MAX_SIZE" 8 214 "1023"
D G "USB_NONISO_PACKET_MAX_SIZE" 8 215 "64"
V G "USB_stack_status" 8 520 "TYPE_USB_STACK_STATUS" `748 
V G "USB_address_pending" 8 522 "int8" `954  "save previous state because packets can take several isrs"
V G "usb_getdesc_ptr" 8 523 "int16" `955 
V G "usb_getdesc_len" 8 523 "int16" `956  "for reading string and config descriptors"
f G "usb_put_0len_0" 8 529 "void()" `957 
V L "endpoint" 8 530 "int8" `959 
V L "status" 8 530 "*int16" `960 
V L "buffer" 8 530 "*int16" `961 
V L "size" 8 530 "*int8" `962 
f G "usb_match_registers" 8 530 "void(int8 endpoint,*int16 status,*int16 buffer,*int8 size)" `958 
f G "usb_isr_tkn_setup_StandardEndpoint" 8 532 "void()" `963 
f G "usb_isr_tkn_setup_StandardDevice" 8 533 "void()" `964 
f G "usb_isr_tkn_setup_StandardInterface" 8 534 "void()" `965 
f G "usb_Get_Descriptor" 8 538 "void()" `966 
f G "usb_copy_desc_seg_to_ep" 8 539 "void()" `967 
f G "usb_finish_set_address" 8 540 "void()" `968 
V G "USB_Interface" 8 542 "int8[2]" `969  "config state for all of our interfaces, NUM_INTERFACES defined with descriptors"
C L "usb_finish_set_address" 8 221 2 "FUNCTION"
F G "usb_enumerated" 8 548 "int8()" `719 
C L "usb_wait_for_enumeration" 8 221 1 "FUNCTION"
F G "usb_wait_for_enumeration" 8 554 "void()" `720 
C L "usb_puts" 8 221 1 "FUNCTION"
V L "endpoint" 8 559 "int8" `727 
V L "ptr" 8 559 "*int8" `728 
V L "len" 8 559 "int16" `729 
V L "timeout" 8 559 "int8" `974 
F G "usb_puts" 8 559 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `726 
V L "i" 8 560 "int16" `970 
V L "res" 8 561 "int1" `971 
V L "this_packet_len" 8 562 "int16" `972 
V L "packet_size" 8 563 "int16" `973 
V L "timeout_1us" 8 564 "int32" `974 
C L "usb_puts" 8 221 2 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 2 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_puts" 8 221 1 "FUNCTION"
C L "usb_gets" 8 221 1 "FUNCTION"
V L "endpoint" 8 608 "int8" `722 
V L "ptr" 8 608 "*int8" `723 
V L "max" 8 608 "int16" `724 
V L "timeout" 8 608 "int16" `982 
F G "usb_gets" 8 608 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `721 
V L "ret" 8 609 "int16" `978 
V L "to" 8 610 "int16" `979 
V L "len" 8 611 "int16" `980 
V L "packet_size" 8 612 "int16" `981 
V L "this_packet_max" 8 613 "int16" `982 
C L "usb_token_reset" 8 221 3 "FUNCTION"
F G "usb_token_reset" 8 645 "void()" `749 
V L "i" 8 646 "int8" `983 
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
C L "usb_token_reset" 8 221 1 "FUNCTION"
D G "usb_put_0len_0" 8 670 "() usb_request_send_response(0)"
C L "usb_endpoint_is_valid" 8 221 10 "FUNCTION"
V L "endpoint" 8 683 "int8" `985 
F G "usb_endpoint_is_valid" 8 684 "int8(int8 endpoint)" `731 
V L "direction" 8 685 "int1" `984 
C L "usb_endpoint_is_valid" 8 221 1 "FUNCTION"
C L "usb_endpoint_is_valid" 8 221 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
V L "endpoint" 8 703 "int8" `986 
F G "usb_isr_tok_in_dne" 8 703 "void(int8 endpoint)" `753 
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 1 "FUNCTION"
V L "endpoint" 8 716 "int8" `986 
F G "usb_isr_tok_out_dne" 8 717 "void(int8 endpoint)" `751  "TODO:"
C L "usb_isr_tok_out_dne" 8 221 2 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 8 221 2 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 2 "FUNCTION"
F G "usb_isr_tok_setup_dne" 8 742 "void()" `750 
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardDevice" 8 802 "void()" `964 
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardInterface" 8 881 "void()" `965 
V L "curr_config" 8 882 "int8" `985 
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 8 221 3 "FUNCTION"
C L "usb_isr_tkn_setup_StandardEndpoint" 8 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardEndpoint" 8 941 "void()" `963 
C L "usb_Get_Descriptor" 8 221 26 "FUNCTION"
F G "usb_Get_Descriptor" 8 1039 "void()" `966 
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 5 "FUNCTION"
C L "usb_Get_Descriptor" 8 221 3 "FUNCTION"
C L "usb_finish_set_address" 8 221 11 "FUNCTION"
F G "usb_finish_set_address" 8 1119 "void()" `968 
C L "usb_finish_set_address" 8 221 1 "FUNCTION"
C L "usb_finish_set_address" 8 221 1 "FUNCTION"
C L "usb_copy_desc_seg_to_ep" 8 221 3 "FUNCTION"
F G "usb_copy_desc_seg_to_ep" 8 1136 "void()" `967 
V L "i" 8 1137 "int8" `986 
V L "c" 8 1138 "int8" `987  "debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]);"
C L "usb_copy_desc_seg_to_ep" 8 221 1 "FUNCTION"
V G "usb_cdc_line_coding" 3 378 "{int32 dwDTERrate,int8 bCharFormat,int8 bParityType,int8 bDataBits}" `993  "length of time, in ms, of break signal as we received in a SendBreak message."
V G "usb_cdc_break" 3 382 "int16" `994 
V G "usb_cdc_put_buffer" 3 385 "int8[63]" `995 
D G "usb_cdc_put_buffer_free" 3 390 "()  usb_tbe(USB_CDC_DATA_IN_ENDPOINT)"
T G "usb_cdc_tx_t" 3 395 "int8" `996 
V G "usb_cdc_put_buffer_nextin" 3 398 "usb_cdc_tx_t" `997 
D G "usb_cdc_get_buffer_status_buffer" 3 402 "usb_ep2_rx_buffer"
V G "usb_cdc_got_set_line_coding" 3 407 "int1" `998 
V G "usb_cdc_carrier" 3 413 "{int1 dte_present,int1 active,int6 reserved}" `1003 
E G "USB_CDC_OUT_NOTHING" 3 415 "0" `1005 
E G "USB_CDC_OUT_COMMAND" 3 415 "1" `1006 
E G "USB_CDC_OUT_LINECODING" 3 415 "2" `1007 
E G "USB_CDC_WAIT_0LEN" 3 415 "3" `1008 
V G "__usb_cdc_state" 3 415 "" `1009  "#if defined(__PCH__)"
C L "usb_isr_tok_out_cdc_control_dne" 3 361 6 "FUNCTION"
F G "usb_isr_tok_out_cdc_control_dne" 3 431 "void()" `653 
C L "usb_isr_tok_out_cdc_control_dne" 3 361 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 3 361 2 "FUNCTION"
C L "usb_isr_tok_out_cdc_control_dne" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
F G "usb_isr_tkn_cdc" 3 467 "void()" `651 
V L "wLen" 3 468 "int16" `1010  "make sure the request goes to a CDC interface"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tkn_cdc" 3 361 1 "FUNCTION"
C L "usb_isr_tok_out_cdc_data_dne" 3 361 1 "FUNCTION"
F G "usb_isr_tok_out_cdc_data_dne" 3 519 "void()" `655 
C L "usb_isr_tok_out_cdc_data_dne" 3 361 4 "FUNCTION"
C L "usb_isr_tok_in_cdc_data_dne" 3 361 1 "FUNCTION"
F G "usb_isr_tok_in_cdc_data_dne" 3 544 "void()" `654 
D G "_STRING" 10 12 ""
D G "_STDDEF" 11 13 ""
D G "ptrdiff_t" 11 18 "unsigned int16"
D G "size_t" 11 24 "unsigned int16"
D G "wchar_t" 11 26 "char"
D G "NULL" 11 27 "0"
D G "offsetof" 11 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 12 12 ""
D G "islower" 12 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 12 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 12 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 12 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 12 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 12 19 "(x)  ((x)==' ')"
D G "isxdigit" 12 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 12 21 "(x)  ((x)<' ')"
D G "isprint" 12 22 "(x)  ((x)>=' ')"
D G "isgraph" 12 23 "(x)  ((x)>' ')"
D G "ispunct" 12 24 "(x)  (((x)>' ')&&!isalnum(x))"
V L "s1" 10 34 "*int8" `1012 
V L "s2" 10 34 "*int8" `1013 
V L "n" 10 34 "int16" `1014 
F G "memmove" 10 35 "*int8(*int8 s1,*int8 s2,int16 n)" `1011 
V L "sc1" 10 36 "*int8" `1015 
V L "sc2" 10 37 "*int8" `1016 
D G "strcopy" 10 54 "strcpy"
V L "s1" 10 61 "*int8" `1018 
V L "s2" 10 61 "*int8" `1019 
V L "n" 10 61 "int16" `1020 
F G "strncpy" 10 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1017 
V L "s" 10 63 "*int8" `1021 
V L "s1" 10 78 "*int8" `1023 
V L "s2" 10 78 "*int8" `1024 
F G "strcat" 10 79 "*int8(*int8 s1,*int8 s2)" `1022 
V L "s" 10 80 "*int8" `1025 
V L "s1" 10 96 "*int8" `1027 
V L "s2" 10 96 "*int8" `1028 
V L "n" 10 96 "int16" `1029 
F G "strncat" 10 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1026 
V L "s" 10 98 "*int8" `1030 
C L "memcmp" 10 19 3 "FUNCTION"
V L "s1" 10 120 "*int8" `1032 
V L "s2" 10 120 "*int8" `1033 
V L "n" 10 120 "int16" `1034 
F G "memcmp" 10 121 "sint8(*int8 s1,*int8 s2,int16 n)" `1031 
V L "su1" 10 122 "*int8" `1035 
V L "su2" 10 122 "*int8" `1036 
C L "strcmp" 10 19 2 "FUNCTION"
V L "s1" 10 134 "*int8" `1038 
V L "s2" 10 134 "*int8" `1039 
F G "strcmp" 10 135 "sint8(*int8 s1,*int8 s2)" `1037 
C L "strcoll" 10 19 2 "FUNCTION"
V L "s1" 10 144 "*int8" `1041 
V L "s2" 10 144 "*int8" `1042 
F G "strcoll" 10 145 "sint8(*int8 s1,*int8 s2)" `1040 
C L "strncmp" 10 19 4 "FUNCTION"
V L "s1" 10 157 "*int8" `1044 
V L "s2" 10 157 "*int8" `1045 
V L "n" 10 157 "int16" `1046 
F G "strncmp" 10 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1043 
C L "strxfrm" 10 19 3 "FUNCTION"
V L "s1" 10 169 "*int8" `1048 
V L "s2" 10 169 "*int8" `1049 
V L "n" 10 169 "int16" `1050 
F G "strxfrm" 10 170 "int16(*int8 s1,*int8 s2,int16 n)" `1047 
V L "s" 10 171 "*int8" `1051 
V L "n1" 10 172 "int8" `1052 
V L "s" 10 191 "*int8" `1054 
V L "c" 10 191 "int8" `1055 
V L "n" 10 191 "int16" `1056 
F G "memchr" 10 192 "*int8(*int8 s,int8 c,int16 n)" `1053 
V L "uc" 10 193 "int8" `1057 
V L "su" 10 194 "*int8" `1058 
V L "s" 10 205 "*int8" `1060 
V L "c" 10 205 "int8" `1061 
F G "strchr" 10 206 "*int8(*int8 s,int8 c)" `1059 
C L "strcspn" 10 19 4 "FUNCTION"
V L "s1" 10 217 "*int8" `1063 
V L "s2" 10 217 "*int8" `1064 
F G "strcspn" 10 218 "int8(*int8 s1,*int8 s2)" `1062 
V L "sc1" 10 219 "*int8" `1065 
V L "sc2" 10 219 "*int8" `1066 
V L "s1" 10 232 "*int8" `1068 
V L "s2" 10 232 "*int8" `1069 
F G "strpbrk" 10 233 "*int8(*int8 s1,*int8 s2)" `1067 
V L "sc1" 10 234 "*int8" `1070 
V L "sc2" 10 234 "*int8" `1071 
V L "s" 10 247 "*int8" `1073 
V L "c" 10 247 "int8" `1074 
F G "strrchr" 10 248 "*int8(*int8 s,int8 c)" `1072 
V L "p" 10 249 "*int8" `1075 
C L "strspn" 10 19 2 "FUNCTION"
V L "s1" 10 262 "*int8" `1077 
V L "s2" 10 262 "*int8" `1078 
F G "strspn" 10 263 "int8(*int8 s1,*int8 s2)" `1076 
V L "sc1" 10 264 "*int8" `1079 
V L "sc2" 10 264 "*int8" `1080 
V L "s1" 10 281 "*int8" `1082 
V L "s2" 10 281 "*int8" `1083 
F G "strstr" 10 282 "*int8(*int8 s1,*int8 s2)" `1081 
V L "s" 10 283 "*int8" `1084 
V L "t" 10 283 "*int8" `1085 
V L "s1" 10 320 "*int8" `1087 
V L "s2" 10 320 "*int8" `1088 
F G "strtok" 10 321 "*int8(*int8 s1,*int8 s2)" `1086 
V L "beg" 10 322 "*int8" `1089 
V L "end" 10 322 "*int8" `1090 
V L "save" 10 323 "*int8" `1091 
C L "strlen" 10 19 6 "FUNCTION"
V L "s" 10 369 "*int8" `1093 
F G "strlen" 10 370 "int8(*int8 s)" `1092 
V L "sc" 10 371 "*int8" `1094 
C L "stricmp" 10 19 2 "FUNCTION"
V L "s1" 10 380 "*int8" `1096 
V L "s2" 10 380 "*int8" `1097 
F G "stricmp" 10 381 "sint8(*int8 s1,*int8 s2)" `1095 
V L "s" 10 394 "*int8" `1101 
F G "strlwr" 10 395 "*int8(*int8 s)" `1100 
V L "p" 10 396 "*int8" `1102 
V L "s" 10 408 "*int8" `1104 
F G "strupr" 10 409 "*int8(*int8 s)" `1103 
V L "p" 10 410 "*int8" `1105 
F G "usb_cdc_flush_tx_buffer" 3 551 "void()" `656 
F G "usb_cdc_init" 3 578 "void()" `652 
T G "cdc_serial_state_t" 3 606 "{int1 bRxCarrier,int1 bTxCarrier,int1 bBreak,int1 bRingSignal,int1 bFraming,int1 bParity,int1 bOverRun,int1 reserved0,int8 reserved1}" `1116  "Send SERIAL_STATE notification to the host.  This contains DSR, DCD, Ring,"
C L "usb_cdc_serial_state" 3 591 4 "FUNCTION"
V L "state" 3 615 "cdc_serial_state_t" `1118 
F G "usb_cdc_serial_state" 3 616 "int8(cdc_serial_state_t state)" `1117 
D G "CDC_EP1_NOTIFY_BUFFER" 3 618 "usb_ep1_tx_buffer"
C L "usb_cdc_serial_state" 3 591 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 2 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 2 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 1 "FUNCTION"
C L "usb_cdc_serial_state" 3 591 1 "FUNCTION"
F G "usb_cdc_get_discard" 3 654 "void()" `650 
F G "usb_cdc_getc" 3 660 "int8()" `647 
V L "c" 3 661 "int8" `1119 
D G "__USB_PAUSE_ISR" 3 680 "()  int1 old_usbie; old_usbie = USBIE; USBIE = 0"
D G "__USB_RESTORE_ISR" 3 681 "() if (old_usbie) USBIE = 1"
V L "c" 3 683 "int8" `1121 
F G "_usb_cdc_putc_fast_noflush" 3 684 "void(int8 c)" `1120 
V L "old_usbie" 3 685 "int1" `1122 
C L "_usb_cdc_putc_fast_noflush" 3 591 1 "FUNCTION"
V L "c" 3 703 "int8" `1124 
F G "usb_cdc_putc_fast" 3 704 "void(int8 c)" `645 
C L "usb_cdc_putc_fast" 3 591 1 "FUNCTION"
C L "usb_cdc_putc_fast" 3 591 1 "FUNCTION"
C L "usb_cdc_putc_fast" 3 591 1 "FUNCTION"
V L "c" 3 726 "int8" `1124 
F G "usb_cdc_putc" 3 727 "void(int8 c)" `648 
C L "usb_cdc_putc" 3 591 2 "FUNCTION"
C L "usb_cdc_putc" 3 591 2 "FUNCTION"
V L "ptr" 3 748 "*int8" `1124 
V L "len" 3 748 "int8" `1125 
F G "usb_cdc_putd" 3 749 "int8(*int8 ptr,int8 len)" `1123 
V L "i" 3 753 "int8" `1126 
V L "c" 3 755 "int8" `1127 
V L "ptr" 3 775 "*int8" `1129 
F G "usb_cdc_puts" 3 776 "int8(*int8 ptr)" `1128 
V L "len" 3 777 "int8" `1130 
C L "gethex1_usb" 3 591 1 "FUNCTION"
C L "gethex1_usb" 12 2 7 "FUNCTION"
F G "gethex1_usb" 3 789 "int8()" `644 
V L "digit" 3 790 "int8" `1131 
F G "gethex_usb" 3 802 "int8()" `643 
V L "lo" 3 803 "int8" `1132 
V L "hi" 3 803 "int8" `1133 
V L "s" 3 813 "*int8" `641 
V L "max" 3 813 "int8" `1136 
F G "get_string_usb" 3 813 "void(*int8 s,int8 max)" `640 
V L "len" 3 814 "int8" `1134 
V L "c" 3 815 "int8" `1135 
C L "get_string_usb" 3 821 1 "FUNCTION"
D G "_STDLIBM" 13 14 ""
T G "node_t" 13 29 "{int16 size,int16 next}" `1140 
D G "debug_stdlibm" 13 38 "(s)"
D G "_MEMMGMT_CSIZE" 14 12 "32768"
D G "_MEMMGMT_POS" 14 13 "15"
V L "size" 14 22 "int16" `1142 
V L "ptr" 14 22 "*node_t" `1143  "create node at given location"
F G "create_node" 14 23 "*node_t(int16 size,*node_t ptr)" `1141 
V L "result" 14 24 "*node_t" `1144 
V L "node" 14 30 "*node_t" `1146 
V L "size" 14 30 "int16" `1147  "update the size of given node"
F G "update_node" 14 31 "void(*node_t node,int16 size)" `1145 
C L "insert_node_after" 14 2 2 "FUNCTION"
V L "place" 14 36 "*node_t" `1149 
V L "node" 14 36 "*node_t" `1150  "place the node after another given node"
F G "insert_node_after" 14 37 "void(*node_t place,*node_t node)" `1148 
V L "node" 14 47 "*node_t" `1152 
F G "remove_node" 14 47 "void(*node_t node)" `1151  "remove the given node from the memlist"
V L "ptr" 14 48 "*node_t" `1153 
F G "traverse" 13 58 "void()" `1154 
V L "node" 13 59 "*node_t" `1155 
V L "temp" 13 59 "*node_t" `1156 
V L "nsize" 13 60 "int16" `1157 
V L "nextsize" 13 60 "int16" `1158 
C L "traverse" 13 72 1 "FUNCTION"
C L "traverse" 13 72 1 "FUNCTION"
V L "size" 13 99 "int16" `1160 
F G "malloc" 13 100 "*int8(int16 size)" `1159 
V L "node" 13 101 "*node_t" `1161 
V L "new" 13 101 "*node_t" `1162 
V L "nsize" 13 102 "int16" `1163 
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
C L "malloc" 13 72 1 "FUNCTION"
V L "nmemb" 13 150 "int16" `1165 
V L "size" 13 150 "int16" `1166 
F G "calloc" 13 151 "*int8(int16 nmemb,int16 size)" `1164 
V L "node" 13 152 "*node_t" `1167 
V L "new" 13 152 "*node_t" `1168 
V L "nsize" 13 153 "int16" `1169 
V L "resize" 13 153 "int16" `1170 
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
C L "calloc" 13 72 1 "FUNCTION"
V L "ptr" 13 198 "*int8" `1176 
F G "free" 13 199 "void(*int8 ptr)" `1175 
V L "node" 13 200 "*node_t" `1177 
V L "nsize" 13 201 "int16" `1178 
C L "free" 13 72 1 "FUNCTION"
C L "free" 13 72 1 "FUNCTION"
C L "free" 13 72 1 "FUNCTION"
V L "ptr" 13 229 "*int8" `1180 
V L "size" 13 229 "int16" `1181 
F G "realloc" 13 230 "*int8(*int8 ptr,int16 size)" `1179 
V L "node" 13 231 "*node_t" `1182 
V L "new" 13 231 "*node_t" `1183 
V L "temp" 13 231 "*node_t" `1184 
V L "nsize" 13 232 "int16" `1185 
V L "nextsize" 13 232 "int16" `1186 
V L "newptr" 13 233 "*int8" `1187 
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
C L "realloc" 13 72 1 "FUNCTION"
V G "recieved" 0 4 "int8[64]" `1188 
V G "TxBuffer" 0 5 "*int8" `1189 
V G "i" 0 6 "int8" `1190 
V G "c" 0 7 "int8" `1191 
V G "motor_status" 0 8 "int1" `1192 
V G "pulsos" 0 10 "int16" `1193 
V G "indice" 0 11 "int16" `1194 
V G "data" 0 12 "int16[278]" `1195  "556 bytes RAM"
V G "data_ready" 0 13 "int8" `1196 
F G "timer0" 0 17 "void()" `1197 
F G "EXT_isr" 0 33 "void()" `1198 
F G "recibir" 0 41 "int8()" `1199 
F G "toogle_motor" 0 72 "void()" `1200 
V L "ms" 0 77 "int8" `1202 
F G "blink_led" 0 78 "void(int8 ms)" `1201 
F G "inicia_medicion" 0 86 "void()" `1203 
C L "inicia_medicion" 0 91 1 "FUNCTION"
F G "finaliza_medicion" 0 100 "void()" `1204 
F G "send_data" 0 108 "void()" `1205 
V L "ms" 0 109 "int16" `1206 
V L "i" 0 111 "int16" `1207 
C L "send_data" 0 91 1 "FUNCTION"
F G "MAIN" 0 128 "void()" `1208 
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0

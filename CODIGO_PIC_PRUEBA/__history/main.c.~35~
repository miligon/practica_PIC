#include <main.h>
#INCLUDE <stdlibm.h>

#INT_TIMER0
void timer0(void)
{

}

#INT_EXT
void  EXT_isr(void) 
{

}

/* TODO: Use usb_cdc_putc() to transmit data to the USB
virtual COM port. Use usb_cdc_kbhit() and usb_cdc_getc() to
receive data from the USB virtual COM port. usb_enumerated()
can be used to see if connected to a host and ready to
communicate. */

char recieved[64];
char * TxBuffer;
char i = 0;
char c = 0;
int1 motor_status = 0;

char recibir()
{
   if ( usb_cdc_kbhit() )
   {
      c = usb_cdc_getc();
      if ( c == '#' )
      {
         i = 0;
         recieved[i] = c;
         do
         {
            if (usb_cdc_kbhit())
            {
               ++i;
               recieved[i] = usb_cdc_getc();
            }
         }while(recieved[i] != '\n');
         return 1;
      }
      return 0;
   }
   else
   {
      return 0;
   }   
}

void toogle_motor()
{
   motor_status = !motor_status;
   printf(usb_cdc_putc, "%i\n",motor_status);
   output_bit(MOTOR, motor_status);
}

void blink_led(int ms)
{
   output_low(LED);
   delay_ms(ms);
   output_high(LED);
   delay_ms(ms);
}

void main()
{
   for (i = 0; i < 64; ++i)
   {
      recieved[i] = 0;
   }
   //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);      //5.4 ms overflow


   //enable_interrupts(INT_EXT);
   //enable_interrupts(GLOBAL);
   
   usb_init();
   usb_cdc_init();
   while(!usb_cdc_connected()){blink_led(300);}

   //Example blinking LED program
   while(true)
   {
      blink_led(50);
      if (recibir())
      {
         if (recieved[0] = '#' && recieved[2] == '\n')
         {
            switch(recieved[1])
            {
               case '1':
                  printf(usb_cdc_putc, "#OK\n");
                  break;
               case '2':
                  printf(usb_cdc_putc, "toogle\n");
                  toogle_motor();
                  printf(usb_cdc_putc, "malloc\n");
                  TxBuffer = malloc(5);
                  TxBuffer = "#ON\n";
                  printf(usb_cdc_putc, "print\n");
                  printf(usb_cdc_putc, TxBuffer);
                  free(TxBuffer);
                  break;
               case '3':
                  break;
               case '4':
                  break;
               case '5':
                  break;
               default:
                  break;
            }
         }
      }
   }

}
